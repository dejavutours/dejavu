<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/headtag'); %>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
  <link href="assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
  <!-- Razorpay SDK -->
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <script src="assets/plugins/global/plugins.bundle.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <style>
    /* Existing styles unchanged */
    .back-btn_booking {
      display: flex;
      align-items: center;
      margin-bottom: 1rem;
    }
    .back-btn_booking a {
      text-decoration: none;
      color: #002d66;
      font-weight: bold;
      display: flex;
      align-items: center;
    }
    .back-btn_booking svg {
      margin-right: 0.5rem;
    }
    .container_booking {
      display: flex;
      flex-wrap: wrap;
      gap: 2rem;
      justify-content: center;
    }
    .form_section_booking,
    .summary_section_booking {
      background-color: #fff;
      padding: 1.5rem;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      flex: 1 1 320px;
      max-width: 600px;
    }
    .cm_margin_booking {
      margin-bottom: 1rem;
    }
    .cm_label_booking {
      display: block;
      margin-top: 1rem;
      margin-bottom: 0.3rem;
      font-weight: 600;
    }
    .cm_field_booking {
      width: 100%;
      border: 1px solid #ccc;
      border-radius: 6px;
      margin-bottom: 0.4rem;
    }
    .cm_input_number_booking {
      border: 1px solid transparent;
      background-color: #f1f1f1;
      padding: 4px;
      font-size: 16px;
      width: 20%;
      border-radius: 11%;
    }
    .cm_row_booking {
      display: flex;
      gap: 1rem;
    }
    .cm_row_booking > div {
      flex: 1;
    }
    .count_group_booking {
      display: flex;
      align-items: center;
      gap: 2rem;
      margin-bottom: 1rem;
      width: 100%;
    }
    .count_group_booking div {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .count_group_booking button {
      background-color: #002d66;
      color: white;
      font-weight: bold;
      padding: 0.3rem 0.8rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
    }
    .summary_section_booking {
      background-color: #fff;
    }
    .summary_section_booking p {
      margin: 0.5rem 0;
    }
    .header_section_booking {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
    .payment-options {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    .payment-options button {
      margin-right: 0.5rem;
      padding: 0.6rem 1.2rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      background-color: #f0f0f0;
      cursor: pointer;
    }
    .payment-btn {
      background-color: #002d66;
      color: white;
      padding: 0.8rem;
      border: none;
      border-radius: 6px;
      width: 100%;
      margin-top: 1rem;
      cursor: pointer;
      font-weight: bold;
    }
    .addperson-btn {
      background-color: #002d66;
      color: white;
      padding: 0.8rem;
      border: none;
      border-radius: 6px;
      margin-top: 1rem;
      cursor: pointer;
      font-weight: bold;
    }
    .remove-btn {
      background-color: #002d66;
      color: white;
      padding: 0.3rem 0.5rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: bold;
    }
    @media (max-width: 768px) {
      .cm_row_booking {
        flex-direction: column;
      }
    }
    .cm_margin_top_booking {
      margin-top: 5px !important;
    }
    .cursor_not_allowed_booking {
      cursor: not-allowed !important;
    }
    #messageModal .modal-content,
    #paymentModal .modal-content {
      border-radius: 10px;
    }
    #messageModal .modal-header,
    #paymentModal .modal-header {
      background: #1a4b8e;
      color: white;
    }
    .traveler-info-modal-label {
      display: block;
      margin-bottom: 0.3rem;
      font-weight: 600;
    }
    .traveler-info-modal-field {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      margin-bottom: 0.4rem;
    }
    .error-message {
      display: none;
      color: red;
      font-size: 0.8rem;
    }
  </style>
</head>

<body>
  <%- include('../partials/header'); %>
  <div class="container">
    <div class="back-btn_booking">
      <a href="javascript:history.back()" class="text-decoration-none">
        <i class="bi bi-arrow-left"></i><span> </span> Back
      </a>
    </div>

    <h2 class="cm_margin_booking">Booking initiated</h2>
    <p>Please enter your details below and proceed to payment. Leave the rest to us.</p>

    <form action="/payment/order" method="POST" id="bookingForm">
      <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
      <input type="hidden" name="tourId" value="<%= tourDetails._id %>" />
      <input type="hidden" name="Adultprice" id="Adultprice" />
      <input type="hidden" name="childprice" id="childprice" />
      <input type="hidden" name="email" id="userEmail" value="<%= userData?.email || '' %>" />
      <input type="hidden" name="firstName" id="firstName" value="<%= userData?.firstName || '' %>" />
      <input type="hidden" name="lastName" id="lastName" value="<%= userData?.lastName || '' %>" />
      <input type="hidden" name="phone" id="phone" value="<%= userData?.phone || '' %>" />
      <input type="hidden" name="userId" id="userId" value="<%= userData?.id || '' %>" />
      <!-- <input type="hidden" name="city" id="userCity" value="<%= userData?.city || '' %>" /> -->
      <div class="container_booking">
        <div class="form_section_booking">
          <div class="cm_row_booking">
            <label class="cm_label_booking" style="min-width: fit-content;">Transport Type</label>
            <select class="cm_field_booking form-select" name="transportType" id="transportType" onchange="populateForm()">
              <option value="" disabled selected>Select Transport Type</option>
              <% tourDetails?.transportList?.forEach(loc=> { %>
              <option value="<%= loc.transferType %>">
                <%= loc.transferType %>
              </option>
              <% }); %>
            </select>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">Joining from</label>
              <select class="cm_field_booking form-select cursor_not_allowed_booking" name="joiningFrom" id="joiningFrom" onchange="populateDates()" disabled>
                <% tourDetails.deptcities.forEach(loc=> { %>
                <option value="<%= loc.City %>" <%= tourDetails.selectedInfo.city == loc.City ? 'selected' : '' %>>
                  <%= loc.City %>
                </option>
                <% }); %>
              </select>
            </div>
            <div>
              <label class="cm_label_booking ">Tour date <span class="text-danger">*</span></label>
              <select class="cm_field_booking enable-disable form-select" name="travelDate" id="travelDate" onchange="onchangetoureDate()">
                <!-- populate based on Joining From Selection -->
              </select>
            </div>
          </div>
          <div class="count_group_booking cm_row_booking">
            <div>
              <label class="cm_label_booking cm_margin_top_booking">Adults (10+): </label>
              <button class="enable-disable" type="button" onclick="increDecreValue('adults','decrement')">-</button>
              <input id="adults" name="adults" class="cm_input_number_booking enable-disable" type="number" value="1" />
              <button class="enable-disable" type="button" onclick="increDecreValue('adults','increment')">+</button>
            </div>
            <div>
              <label class="cm_label_booking cm_margin_top_booking">Children (5-10):</label>
              <button class="enable-disable" type="button" onclick="increDecreValue('children','decrement')">-</button>
              <input id="children" name="children" class="cm_input_number_booking enable-disable" type="number" value="0" />
              <button class="enable-disable" type="button" onclick="increDecreValue('children','increment')">+</button>
            </div>
          </div>
          <h3>Personâ€™s details</h3>
          <div id="personDetailsContainer">
            <div class="person-details" id="person1">
              <h4>Person 1</h4>
              <div class="cm_row_booking">
                <div>
                  <label class="cm_label_booking form-label">First name <span class="text-danger">*</span></label>
                  <input id="firstName" name="personDetails[0][firstName]" class="cm_field_booking enable-disable" type="text" placeholder="Your name here" required value="<%= userData?.firstName || '' %>" />
                </div>
                <div>
                  <label class="cm_label_booking form-label">Last name <span class="text-danger">*</span></label>
                  <input id="Surname" name="personDetails[0][Surname]" class="cm_field_booking enable-disable" type="text" placeholder="Please enter last name" required value="<%= userData?.lastName || '' %>" />
                </div>
              </div>
              <div class="cm_row_booking">
                <div>
                  <label class="cm_label_booking">Birth date <span class="text-danger">*</span></label>
                  <input id="dateofbirth" name="personDetails[0][dateofbirth]" class="cm_field_booking enable-disable form-control" required type="date" value="<%= userData?.birthDate ? new Date(userData.birthDate).toISOString().split('T')[0] : '' %>" />
                </div>
                <div>
                  <label class="cm_label_booking form-label">Gender <span class="text-danger">*</span></label>
                  <select id="Gender" name="personDetails[0][Gender]" class="cm_field_booking enable-disable form-select" required>
                    <option value="" disabled <%= !userData?.gender ? 'selected' : '' %>>Select Gender</option>
                    <option value="Male" <%= userData?.gender === 'Male' ? 'selected' : '' %>>Male</option>
                    <option value="Female" <%= userData?.gender === 'Female' ? 'selected' : '' %>>Female</option>
                    <option value="Other" <%= userData?.gender === 'Other' ? 'selected' : '' %>>Other</option>
                  </select>
                </div>
              </div>
              <div class="cm_row_booking">
                <div>
                  <label class="cm_label_booking">Mobile number <span class="text-danger">*</span></label>
                  <input id="mobileno" name="personDetails[0][mobileno]" class="cm_field_booking enable-disable" type="tel" required placeholder="+91 Enter your mobile number" value="<%= userData?.phone || '' %>" />
                </div>
                <div>
                  <label class="cm_label_booking">Alternative number</label>
                  <input id="alternateNumber" name="personDetails[0][alternateNumber]" class="cm_field_booking enable-disable" type="tel" placeholder="+91 Enter alt mobile number" value="<%= userData?.alternateNumber || '' %>" />
                </div>
              </div>
            </div>
          </div>
          <button id="AddPerson" type="button" class="addperson-btn enable-disable" onclick="addPerson()">+ Add all person's detail</button>
          <label class="cm_label_booking" style="margin-top: 1rem;">Additional services (optional)</label>
        </div>
        <div class="summary_section_booking">
          <h3>Booking summary</h3>
          <p><strong>Trip :</strong><strong><%= tourDetails.name %></strong></p>
          <p><strong>Duretion :</strong><%= tourDetails.days %></p>
          <p><strong>Pickup from :</strong><span id="pickupFrom"></span></p>
          <p><strong>Travel date :</strong><span id="travelDateDisplay"></span></p>
          <p><strong>Total costs:</strong> &nbsp; â‚¹ <span id="totalCost"> 0 </span></p>
          <p>
            <a href="#" id="openCostModalBtn" data-bs-toggle="modal" data-bs-target="#costBreakdownModal">View Cost Breakdown</a>
          </p>
          <div class="alert alert-warning mt-4 mb-1">
            3AC train ticket and flight ticket charges will be applied after the actual ticket booking.
          </div>
          <div class="payment-options">
            <button class="cursor_not_allowed_booking" disabled>Pay full payment</button>
            <button class="cursor_not_allowed_booking" disabled>Pay part payment</button>
          </div>
          <label class="cm_label_booking">Amount to pay now</label>
          <input id="payingAmount" name="payingAmount" class="cm_field_booking" type="text" readonly />
          <button id="submit" class="payment-btn enable-disable">Pay â‚¹<span id="payingAmountDisplay"></span> now</button>
        </div>
      </div>
    </form>
  </div>
  <!-- Cost Breakdown Modal -->
  <div class="modal fade" id="costBreakdownModal" tabindex="-1" aria-labelledby="costBreakdownModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
      <div class="modal-content shadow-lg rounded-4">
        <div class="modal-header">
          <h5 class="modal-title" id="costBreakdownModalLabel">Cost Breakdown</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <h6 class="fw-bold"><%= tourDetails.name %></h6>
          <p class="mb-2 text-muted"><%= tourDetails.days %></p>
          <div class="row mb-3">
            <div class="col-md-6"><strong>Pickup from:</strong> <span id="ModelpickupFrom"></span></div>
            <div class="col-md-6"><strong>Travel date:</strong> <span id="ModeltravelDate"></span></div>
          </div>
          <h4 class="fw-bold mb-3">Total cost</h4>
          <table class="table">
            <thead>
              <tr>
                <th>Item</th>
                <th>Price</th>
                <th>Final Amount</th>
              </tr>
            </thead>
            <tbody id="costTableBody"></tbody>
          </table>
          <div class="d-flex justify-content-between border-top pt-2">
            <strong>Subtotal</strong>
            <span id="MSubtotal">â‚¹0000</span>
          </div>
          <div class="d-flex justify-content-between border-top pt-2">
            <strong>GST(5%)</strong>
            <span id="MGst">â‚¹0000</span>
          </div>
          <div class="d-flex justify-content-between border-top pt-2 fs-5">
            <strong>Total</strong>
            <strong id="MTotal">â‚¹0000</strong>
          </div>
          <div class="alert alert-warning mt-4 mb-0">
            3AC train ticket and flight ticket charges will be applied after the actual ticket booking.
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Message Modal -->
  <div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="messageModalLabel">Message</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" onclick="closeMsgModal()"></button>
        </div>
        <div class="modal-body" id="messageBody"></div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeMsgModal()">Close</button>
        </div>
      </div>
    </div>
  </div>
  <!-- Traveler Info Modal -->
  <div class="modal fade" id="travelerInfoModal" tabindex="-1" aria-labelledby="travelerInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="travelerInfoModalLabel">Update Information</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" onclick="closeTravelerInfoModal()"></button>
        </div>
        <div class="modal-body">
          <div>
            <label class="traveler-info-modal-label">First Name</label>
            <input id="modalFirstName" class="traveler-info-modal-field" type="text" placeholder="Your first name" />
            <span class="error-message" id="modalFirstNameError">Please enter your first name.</span>
          </div>
          <div>
            <label class="traveler-info-modal-label">Last Name</label>
            <input id="modalSurname" class="traveler-info-modal-field" type="text" placeholder="Your last name" />
            <span class="error-message" id="modalSurnameError">Please enter your last name.</span>
          </div>
          <div>
            <label class="traveler-info-modal-label">Email</label>
            <input id="modalEmail" class="traveler-info-modal-field" type="email" placeholder="Your email"
            <% if (!userData?.isloginFrommobile) { %>
              disabled
            <% } %>
            />
            <span class="error-message" id="modalEmailError">Please enter a valid email.</span>
          </div>
          <div>
            <label class="traveler-info-modal-label">Mobile Number <span class="text-danger">*</span></label>
            <input id="modalMobileNo" class="traveler-info-modal-field" type="tel" required placeholder="+91 Enter your mobile number" 
             <% if (userData?.isloginFrommobile) { %>
              disabled
            <% } %>/>
            <span class="error-message" id="modalMobileNoError">Please enter a valid mobile number.</span>
          </div>
          <div>
            <label class="traveler-info-modal-label">Alternate Number</label>
            <input id="modalAlternateNumber" class="traveler-info-modal-field" type="tel" placeholder="+91 Enter alternate number" />
            <span class="error-message" id="modalAlternateNumberError">Please enter a valid alternate number.</span>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeTravelerInfoModal()">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="saveTravelerInfo()">Save and Proceed</button>
        </div>
      </div>
    </div>
  </div>
  <!-- Payment Status Modal -->
  <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="paymentModalLabel">Payment Status</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" onclick="closePaymentModal()"></button>
        </div>
        <div class="modal-body" id="paymentModalBody"></div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closePaymentModal()">Close</button>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer'); %>
  <%- include('../partials/scripttag'); %>
<script>
    // Existing functions unchanged
    function populateForm() {
      const allFields = document.querySelectorAll('.enable-disable');
      allFields.forEach(field => field.disabled = false);
      allFields.forEach(field => field.classList.remove('cursor_not_allowed_booking', 'opacity-50'));
      const transportType = document.getElementById('transportType');
      const transportList = <%-JSON.stringify(tourDetails.transportList) %>;
      const priceBaseOnTransportType = transportList.find((t) => t.transferType === transportType.value);
      const Adultprice = document.getElementById('Adultprice');
      const childprice = document.getElementById('childprice');
      Adultprice.value = priceBaseOnTransportType.adultPrice;
      childprice.value = priceBaseOnTransportType.childPrice;
      populateDates();
    }
  
    const deptcities = <%-JSON.stringify(tourDetails.deptcities) %>;
  
    function populateDates(isFromLoad) {
      const selectedCity = document.getElementById('joiningFrom').value.trim();
      const travelDateSelect = document.getElementById('travelDate');
      const pickupFrom = document.getElementById('pickupFrom');
      const ModelpickupFrom = document.getElementById('ModelpickupFrom');
      const ModeltravelDate = document.getElementById('ModeltravelDate');
      const travelDateDisplay = document.getElementById('travelDateDisplay');
      const cityObj = deptcities.find(loc => loc.City.trim() === selectedCity);
      while (travelDateSelect.options.length > 0) {
        travelDateSelect.remove(0);
      }
      pickupFrom.innerHTML = ModelpickupFrom.innerHTML = selectedCity;
      if (cityObj && cityObj.dates && cityObj.dateList.length > 0) {
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Select Date';
        defaultOption.disabled = true;
        defaultOption.selected = true;
        travelDateSelect.appendChild(defaultOption);
        cityObj.dateList.forEach(element => {
          const option = document.createElement('option');
          option.value = element;
          option.textContent = element;
          travelDateSelect.appendChild(option);
        });
        if (cityObj && cityObj.price && cityObj.price.length > 0) {
          recalculateCost();
        }
      } else {
        const option = document.createElement('option');
        option.textContent = 'No Tour dates available';
        travelDateSelect.appendChild(option);
      }
      travelDateDisplay.innerHTML = ModeltravelDate.innerHTML = travelDateSelect.value || 'Select Date';
      if ($.fn.niceSelect) {
        $('#travelDate').niceSelect('destroy');
        $('#joiningFrom').niceSelect('destroy');
        $('#transportType').niceSelect('destroy');
        $('#Gender').niceSelect('destroy');
      }
    }
  
    function onchangetoureDate() {
      const travelDateSelect = document.getElementById('travelDate');
      const travelDateDisplay = document.getElementById('travelDateDisplay');
      const ModeltravelDate = document.getElementById('ModeltravelDate');
      travelDateDisplay.innerHTML = ModeltravelDate.innerHTML = travelDateSelect.value;
    }
  
    function recalculateCost() {
      const AdultpriceValue = document.getElementById('Adultprice').value.trim();
      const childpriceValue = document.getElementById('childprice').value.trim();
      const NoofAdutts = document.getElementById('adults').value.trim();
      const NoofChild = document.getElementById('children').value.trim();
      const totalCost = document.getElementById('totalCost');
      const payingAmountDisplay = document.getElementById('payingAmountDisplay');
      const payingAmount = document.getElementById('payingAmount');
      if (isNaN(parseInt(AdultpriceValue)) && isNaN(parseInt(childpriceValue))) {
        totalCost.innerHTML = payingAmountDisplay.innerHTML = '0';
      } else {
        const subtotal = parseInt(NoofAdutts) * parseInt(AdultpriceValue) + parseInt(NoofChild) * parseInt(childpriceValue);
        const gst = subtotal * 0.05;
        const total = subtotal + gst;
        totalCost.innerHTML = payingAmountDisplay.innerHTML = payingAmount.value = total.toFixed(2);
      }
    }
  
    function increDecreValue(type, operation) {
      const el = document.getElementById(type);
      const personCount = document.getElementById("personDetailsContainer").children.length;
      const NoofAdutts = document.getElementById('adults').value.trim();
      const NoofChild = document.getElementById('children').value.trim();
      if (operation === 'increment') {
        el.value = parseInt(el.value) + 1;
        const addPerson = document.getElementById('AddPerson');
        addPerson.style.display = 'block';
      } else {
        if (parseInt(personCount) < (parseInt(NoofAdutts) + parseInt(NoofChild)) || ((type == 'adults' && parseInt(el.value) == 1) || parseInt(el.value) == 0)) {
          el.value = ((type == 'adults' && parseInt(el.value) == 1) || parseInt(el.value) == 0) ? el.value : parseInt(el.value) - 1;
        } else {
          toastr.error("Person details already added. Remove a person first to reduce the count.");
        }
      }
      recalculateCost();
    }
  
    function addPerson() {
      const personContainer = document.getElementById("personDetailsContainer");
      const personCount = personContainer.children.length + 1;
      const NoofAdutts = document.getElementById('adults').value.trim();
      const NoofChild = document.getElementById('children').value.trim();
      if (parseInt(personContainer.children.length) < (parseInt(NoofAdutts) + parseInt(NoofChild))) {
        let personDiv = document.createElement("div");
        personDiv.classList.add("person-details", "border-top", "border-secondary");
        personDiv.id = `person${personCount}`;
        personDiv.innerHTML = `
          <div class="cm_row_booking pt-2 header_section_booking">
            <h4>Person ${personCount}</h4>
            <button id="removePerson${personCount}" type="button" class="remove-btn" onclick="removePerson(${personCount})">x</button>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">First name <span class="text-danger">*</span></label>
              <input id="firstName" name="personDetails[${personCount - 1}][firstName]" class="cm_field_booking" type="text" required placeholder="Your name here" />
            </div>
            <div>
              <label class="cm_label_booking">Last name <span class="text-danger">*</span></label>
              <input id="Surname" name="personDetails[${personCount - 1}][Surname]" class="cm_field_booking" type="text" required placeholder="Please enter last name" />
            </div>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">Birth date <span class="text-danger">*</span></label>
              <input id="dateofbirth" name="personDetails[${personCount - 1}][dateofbirth]" class="cm_field_booking form-control" required type="date" />
            </div>
            <div>
              <label class="cm_label_booking">Gender <span class="text-danger">*</span></label>
              <select id="Gender" name="personDetails[${personCount - 1}][Gender]" class="cm_field_booking form-select" required>
                <option value="" disabled selected>Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
              </select>
            </div>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">Mobile number <span class="text-danger">*</span></label>
              <input id="mobileno" name="personDetails[${personCount - 1}][mobileno]" class="cm_field_booking" type="tel" required placeholder="+91 Enter your mobile number" />
            </div>
            <div>
              <label class="cm_label_booking">Alternative number</label>
              <input id="alternateNumber" name="personDetails[${personCount - 1}][alternateNumber]" class="cm_field_booking" type="tel" placeholder="+91 Enter alt mobile number" />
            </div>
          </div>
        `;
        personContainer.appendChild(personDiv);
        const addPerson = document.getElementById('AddPerson');
        if (parseInt(personContainer.children.length) == (parseInt(NoofAdutts) + parseInt(NoofChild))) {
          addPerson.style.display = 'none';
        } else {
          addPerson.style.display = 'block';
        }
      }
    }
  
    function removePerson(removePersonId) {
      let div = document.getElementById(`person${removePersonId}`);
      if (div) {
        div.remove();
      }
      const addPerson = document.getElementById('AddPerson');
      addPerson.style.display = 'block';
    }
  
    window.onload = () => {
      const allFields = document.querySelectorAll('.enable-disable');
      const transportType = document.getElementById('transportType').value.trim();
      if (!transportType) {
        allFields.forEach(field => field.disabled = true);
        allFields.forEach(field => field.classList.add('cursor_not_allowed_booking', 'opacity-50'));
      }
      populateDates('onload');
    };
  
    const msgModal = new bootstrap.Modal(document.getElementById("messageModal"));
    const travelerInfoModal = new bootstrap.Modal(document.getElementById("travelerInfoModal"));
    const paymentModal = new bootstrap.Modal(document.getElementById("paymentModal"));
  
    function closeMsgModal() {
      msgModal.hide();
    }
  
    function closeTravelerInfoModal() {
      travelerInfoModal.hide();
    }
  
    function closePaymentModal() {
      paymentModal.hide();
    }
  
    function openTravelerInfoModal() {
      const firstName = document.querySelector('input[name="firstName"]').value;
      const surname = document.querySelector('input[name="lastName"]').value;
      const email = document.querySelector('input[name="email"]').value;
      const mobileNo = document.querySelector('input[name="phone"]').value;
      const alternateNumber = document.querySelector('input[name="personDetails[0][alternateNumber]"]').value;
      document.getElementById('modalFirstName').value = firstName || '';
      document.getElementById('modalSurname').value = surname || '';
      document.getElementById('modalEmail').value = email || '';
      document.getElementById('modalMobileNo').value = mobileNo || '';
      document.getElementById('modalAlternateNumber').value = alternateNumber || '';
      travelerInfoModal.show();
    }
  
    async function saveTravelerInfo() {
      const mobileNo = document.getElementById('modalMobileNo').value.trim();
      const firstName = document.getElementById('modalFirstName').value.trim();
      const surname = document.getElementById('modalSurname').value.trim();
      const email = document.getElementById('modalEmail').value.trim();
      const alternateNumber = document.getElementById('modalAlternateNumber').value.trim();
      let isValid = true;
      let isSubmitting = false; // Prevent multiple submissions
  
      // Validate required fields
      if (!mobileNo || !mobileNo.match(/^\+?\d{10,15}$/)) {
        document.getElementById('modalMobileNoError').style.display = 'block';
        isValid = false;
      } else {
        document.getElementById('modalMobileNoError').style.display = 'none';
      }
  
      if (!firstName) {
        document.getElementById('modalFirstNameError').style.display = 'block';
        isValid = false;
      } else {
        document.getElementById('modalFirstNameError').style.display = 'none';
      }
  
      if (!surname) {
        document.getElementById('modalSurnameError').style.display = 'block';
        isValid = false;
      } else {
        document.getElementById('modalSurnameError').style.display = 'none';
      }
  
      if (!email || !email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
        document.getElementById('modalEmailError').style.display = 'block';
        isValid = false;
      } else {
        document.getElementById('modalEmailError').style.display = 'none';
      }
  
      if (alternateNumber && !alternateNumber.match(/^\+?\d{10,15}$/)) {
        document.getElementById('modalAlternateNumberError').style.display = 'block';
        isValid = false;
      } else {
        document.getElementById('modalAlternateNumberError').style.display = 'none';
      }
  
      if (isValid && !isSubmitting) {
        isSubmitting = true;
        try {
          const profileData = {
            mobileNumber: mobileNo,
            firstName,
            lastName: surname,
            email,
            alternateNumber: alternateNumber || ''
          };
          const response = await fetch('/profile/update', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'CSRF-Token': document.querySelector('input[name="_csrf"]').value
            },
            body: JSON.stringify(profileData)
          });
          const result = await response.json();
          if (result.message.includes('successfully')) {
            toastr.success('Profile updated successfully.');
            // Update hidden profile inputs only
            document.querySelector('input[name="email"]').value = email;
            document.querySelector('input[name="firstName"]').value = firstName;
            document.querySelector('input[name="lastName"]').value = surname;
            document.querySelector('input[name="phone"]').value = mobileNo;
            isSubmitting=true;
            closeTravelerInfoModal();
            setTimeout(()=>{
              document.getElementById('bookingForm').dispatchEvent(new Event('submit'));
            },100)
          } else {
            toastr.error('Failed to update profile: ' + result.message);
          }
        } catch (err) {
          toastr.error('Error updating profile: ' + err.message);
          console.error('Profile update error:', err);
        } finally {
          isSubmitting = false;
        }
      }
    }
  
    const today = new Date();
  
    function calculateAge(dobString) {
      const dob = new Date(dobString);
      let age = today.getFullYear() - dob.getFullYear();
      const monthDiff = today.getMonth() - dob.getMonth();
      const dayDiff = today.getDate() - dob.getDate();
      if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
        age--;
      }
      return age;
    }
  
    document.getElementById('bookingForm').addEventListener('submit', async function(e) {
      e.preventDefault();
  
      // Check userData for required fields
      const userData = <%- JSON.stringify(userData || {}) %>;
      const requiredFields = ['firstName', 'lastName', 'email', 'phone'];
      const isProfileComplete = requiredFields.every(field => userData[field] && userData[field].trim() !== '');
  
      // if (!isProfileComplete) {
      //   openTravelerInfoModal();
      //   return; // Stop submission until profile is updated
      // }  
      // Existing adult/child validation
      const NoofAdutts = document.getElementById('adults').value.trim();
      const NoofChild = document.getElementById('children').value.trim();
      let isAdultAvailable = false;
      let isShowMessage = false;
      let nofAdlutDetail = 0;
      let noofChildDetail = 0;
      let message = '';
      const dobList = document.querySelectorAll('[id="dateofbirth"]');
      dobList.forEach((ele) => {
        const age = calculateAge(ele.value);
        if (age > 10) {
          nofAdlutDetail += 1;
          isAdultAvailable = true;
        } else if (age >= 5 && age <= 10) {
          noofChildDetail += 1;
        } else {
          isShowMessage = true;
          message += "<li><p class='text-danger'>â€¢ Invalid age for person based on birth date.</p></li>";
        }
      });
      if (!isAdultAvailable) {
        isShowMessage = true;
        message += "<li><p class='text-danger'>â€¢ At least one Adult person's detail is required based on the date of birth provided.</p></li>";
      }
      if (parseInt(nofAdlutDetail) > parseInt(NoofAdutts) || parseInt(noofChildDetail) > parseInt(NoofChild)) {
        isShowMessage = true;
        message += "<li><p class='text-danger'>â€¢ The number of adults and children you selected doesn't match the ages provided. Please update the person details to include the correct number of adults and children as selected.</p></li>";
      }
      if (isShowMessage) {
        const messageBody = document.getElementById('messageBody');
        messageBody.innerHTML = '<ul>' + message + '</ul>';
        msgModal.show();
        return;
      }
  
      // Prepare data for /payment/order
      const form = document.getElementById('bookingForm');
      const formData = new FormData(form);
      const data = {
        _csrf: formData.get('_csrf'),
        tourId: formData.get('tourId'),
        userId: formData.get('userId'),
        transportType: formData.get('transportType'),
        joiningFrom: document.getElementById('joiningFrom').value.trim(),
        travelDate: formData.get('travelDate'),
        adults: formData.get('adults'),
        children: formData.get('children'),
        Adultprice: formData.get('Adultprice'),
        childprice: formData.get('childprice'),
        payingAmount: formData.get('payingAmount'),
        name: `${formData.get('firstName') || 'Guest'}}`.trim(),
        email: formData.get('email') || userData.email,
        contact: formData.get('phone') || (userData.isloginFromNumber ? userData.phone : userData.email) || '',
        personDetails: []
      };
  
      // Construct personDetails
      for (let i = 0; i < (parseInt(NoofAdutts) + parseInt(NoofChild)); i++) {
        if (formData.get(`personDetails[${i}][mobileno]`)) {
          data.personDetails.push({
            firstName: formData.get(`personDetails[${i}][firstName]`) || '',
            surname: formData.get(`personDetails[${i}][Surname]`) || '',
            gender: formData.get(`personDetails[${i}][Gender]`),
            birthdate: formData.get(`personDetails[${i}][dateofbirth]`),
            phone: formData.get(`personDetails[${i}][mobileno]`),
            altphone: formData.get(`personDetails[${i}][alternateNumber]`) || ''
          });
        }
      }
  
      // Submit to /payment/order
      try {
        const response = await fetch('/payment/order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': formData.get('_csrf')
          },
          body: JSON.stringify(data)
        });
        const result = await response.json();
        if (result.success) {
          // Open Razorpay payment modal
          const options = {
            key: result.razorpayKeyId,
            amount: result.order.amount,
            currency: result.order.currency,
            name: 'Travel Booking',
            description: `Payment for booking ${result.bookingId}`,
            order_id: result.order.id,
            handler: async function (response) {
              // Verify payment
              try {
                const verifyResponse = await fetch('/payment/verify', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'CSRF-Token': formData.get('_csrf')
                  },
                  body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                    bookingId: result.bookingId
                  })
                });
                const verifyResult = await verifyResponse.json();
                const paymentModalBody = document.getElementById('paymentModalBody');
                if (verifyResult.success) {
                  paymentModalBody.innerHTML = `
                    <p class="text-success">Payment successful! Your booking is confirmed.</p>
                    <p>Booking ID: ${result.bookingId}</p>
                    <p>Amount Paid: â‚¹${result.order.amount / 100}</p>
                  `;
                } else {
                  paymentModalBody.innerHTML = `
                    <p class="text-danger">Payment verification failed. Please try again.</p>
                    <p>Error: ${verifyResult.message}</p>
                  `;
                }
                paymentModal.show();
              } catch (err) {
                document.getElementById('paymentModalBody').innerHTML = `
                  <p class="text-danger">Error verifying payment: ${err.message}</p>
                `;
                paymentModal.show();
              }
            },
            prefill: {
              name: result.name,
              email: result.email,
              contact: result.contact
            },
            theme: {
              color: '#002d66'
            }
          };
          const rzp = new Razorpay(options);
          rzp.on('payment.failed', function (response) {
            document.getElementById('paymentModalBody').innerHTML = `
              <p class="text-danger">Payment failed: ${response.error.description}</p>
            `;
            paymentModal.show();
          });
          rzp.open();
        } else {
          toastr.error(result.message || 'Failed to initiate payment.');
        }
      } catch (err) {
        toastr.error('Error initiating payment: ' + err.message);
        console.error('Payment error:', err);
      }
    });
  
    document.addEventListener("DOMContentLoaded", function() {
      document.getElementById("openCostModalBtn").addEventListener("click", function() {
        const costTable = document.getElementById("costTableBody");
        costTable.innerHTML = "";
        const AdultpriceValue = document.getElementById('Adultprice').value.trim();
        const childpriceValue = document.getElementById('childprice').value.trim();
        const NoofAdutts = document.getElementById('adults').value.trim();
        const NoofChild = document.getElementById('children').value.trim();
        const costDetails = [
          { label: "Adults", quantity: NoofAdutts, price: AdultpriceValue, total: NoofAdutts * AdultpriceValue },
          { label: "Child", quantity: NoofChild, price: childpriceValue, total: NoofChild * childpriceValue }
        ];
        const subtotalAmountValue = (NoofAdutts * AdultpriceValue) + (NoofChild * childpriceValue);
        const gstAmountValue = subtotalAmountValue * 0.05;
        const totalAmount = subtotalAmountValue + gstAmountValue;
        costDetails.forEach(item => {
          const row = `<tr>
            <td>${item.label}</td>
            <td>${item.quantity} x â‚¹${item.price}</td>
            <td>â‚¹${item.total}</td>
          </tr>`;
          costTable.innerHTML += row;
        });
        document.getElementById("MSubtotal").textContent = ` â‚¹${subtotalAmountValue}`;
        document.getElementById("MGst").textContent = ` â‚¹${gstAmountValue}`;
        document.getElementById("MTotal").textContent = ` â‚¹${totalAmount}`;
      });
    });
  </script>
</body>
</html>
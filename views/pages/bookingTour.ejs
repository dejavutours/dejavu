<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/headtag'); %>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
  <link href="/assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <script src="/assets/plugins/global/plugins.bundle.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Razorpay SDK -->
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  
  <style>
    .back-btn_booking {
      display: flex;
      align-items: center;
      margin-bottom: 1rem;
    }
    .back-btn_booking a {
      text-decoration: none;
      color: #002d66;
      font-weight: bold;
      display: flex;
      align-items: center;
    }
    .back-btn_booking svg {
      margin-right: 0.5rem;
    }
    .container_booking {
      display: flex;
      flex-wrap: wrap;
      gap: 2rem;
      justify-content: center;
    }
    .form_section_booking,
    .summary_section_booking {
      background-color: #fff;
      padding: 1.5rem;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      flex: 1 1 320px;
      max-width: 600px;
    }
    .cm_margin_booking {
      margin-bottom: 1rem;
    }
    .cm_label_booking {
      display: block;
      margin-top: 1rem;
      margin-bottom: 0.3rem;
      font-weight: 600;
    }
    .cm_field_booking {
      width: 100%;
      border: 1px solid #ccc;
      border-radius: 6px;
      margin-bottom: 0.4rem;
    }
    .cm_input_number_booking {
      border: 1px solid transparent;
      background-color: #f1f1f1;
      padding: 4px;
      font-size: 16px;
      width: 20%;
      border-radius: 6px;
      text-align: center;
    }
    .cm_row_booking {
      display: flex;
      gap: 1rem;
    }
    .cm_row_booking > div {
      flex: 1;
    }
    .count_group_booking {
      display: flex;
      align-items: center;
      gap: 2rem;
      margin-bottom: 1rem;
      width: 100;
      margin-top: 10px;
    }
    .count_group_booking div {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .count_group_booking button {
      background-color: #002d66;
      color: white;
      font-weight: bold;
      padding: 0.3rem 0.8rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
    }
    .summary_section_booking {
      background-color: #fff;
    }
    .summary_section_booking p {
      margin: 0.5rem 0;
    }
    .header_section_booking {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
    .payment-options {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    .payment-options button {
      margin-right: 0.5rem;
      padding: 0.6rem 1.2rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      background-color: #f0f0f0;
      cursor: pointer;
      flex: 1;
    }
    .payment-btn {
      background-color: #002d66;
      color: white;
      padding: 0.8rem;
      border: none;
      border-radius: 6px;
      width: 100%;
      margin-top: 1rem;
      cursor: pointer;
      font-weight: bold;
    }
    .addperson-btn {
      background-color: #002d66;
      color: white;
      padding: 0.8rem;
      border: none;
      border-radius: 6px;
      margin-top: 1rem;
      cursor: pointer;
      font-weight: bold;
      width: 100%;
    }
    .remove-btn {
      background-color: #002d66;
      color: white;
      padding: 0.3rem 0.5rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: bold;
      font-size: 0.9rem;
    }
    @media (max-width: 768px) {
      .cm_row_booking {
        flex-direction: column;
      }
      .container_booking {
        flex-direction: column;
      }
      .payment-options {
        flex-direction: column;
        gap: 0.5rem;
      }
      .payment-options button {
        width: 100%;
      }
    }
    .cm_margin_top_booking {
      margin-top: 5px !important;
    }
    .cursor_not_allowed_booking {
      cursor: not-allowed !important;
    }

    #messageModal .modal-content {
      border-radius: 10px; /* Rounded modal */
    }

    #messageModal .modal-header {
      background: #1a4b8e;
      color: white;
    }
    #costBreakdownModal .modal-dialog {
      max-width: 800px;
    }
    #costBreakdownModal .modal-body {
      padding: 1.5rem;
    }
    #costBreakdownModal .d-flex {
      margin-bottom: 0.5rem;
    }
    #costBreakdownModal .alert-warning {
      margin-top: 1rem;
    }

    /* Style for notes */
    .note {
      background-color: #fff3cd;
      border: 1px solid #ffeeba;
      border-radius: 6px;
      padding: 0.75rem;
      margin-bottom: 1rem;
      font-size: 0.9rem;
      color: #856404;
    }
  </style>
</head>
<body>
  <%- include('../partials/header'); %>
  <div class="container">
    <div class="back-btn_booking">
      <a href="javascript:history.back()" class="text-decoration-none">
        <i class="bi bi-arrow-left"></i><span> </span> Back
      </a> 
    </div>
    <h2 class="cm_margin_booking">Booking initiated</h2>
    <p>Please enter your details below and proceed to payment. Leave the rest to us.</p>
    <div class="note">
      <strong>Note:</strong> Please select a transport type first to enable the form and set the pricing. This step is required to proceed with your booking.
    </div>
    <form id="bookingForm" action="/bookingTour" method="POST">
      <input type="hidden" name="_csrf" value="<%= csrfToken %>"/>
      <input type="hidden" name="Adultprice" id="Adultprice"/>
      <input type="hidden" name="childprice" id="childprice"/>
      <div class="container_booking">
        <div class="form_section_booking">
          <div class="cm_row_booking">
            <label class="cm_label_booking" style="min-width: fit-content;">Transport Type</label>
            <select class="cm_field_booking form-select" name="transportType" id="transportType" onchange="populateForm()" required>
              <option value="" disabled selected>Select Transport Type</option>
              <% tourDetails?.transportList?.forEach(loc=> { %>
                <option value="<%= loc.transferType %>">
                  <%= loc.transferType %>
                </option>
              <% }); %>
            </select>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">Joining from</label>
              <select class="cm_field_booking form-select cursor_not_allowed_booking" name="joiningFrom" id="joiningFrom" onchange="populateDates()" disabled required>
                <% tourDetails.deptcities.forEach(loc=> { %>
                  <option value="<%= loc.City %>" <%= tourDetails.selectedInfo.city == loc.City ? 'selected' : '' %> >
                    <%= loc.City %>
                  </option>
                <% }); %>
              </select>
            </div>
            <div>
              <label class="cm_label_booking">Tour date <span class="text-danger">*</span></label>
              <select class="cm_field_booking enable-disable form-select" name="travelDate" id="travelDate" onchange="onchangetoureDate()" required>
                <option value="" disabled selected>Select a date</option>
              </select>
            </div>
          </div>
          <div class="count_group_booking cm_row_booking">
            <div>
              <label class="cm_label_booking cm_margin_top_booking">Adults (10+): </label>
              <button class="enable-disable" type="button" onclick="increDecreValue('adults','decrement')">-</button>
              <input id="adults" name="adults" class="cm_input_number_booking enable-disable" type="number" value="1" min="1" required />
              <button class="enable-disable" type="button" onclick="increDecreValue('adults','increment')">+</button>
            </div>
            <div>
              <label class="cm_label_booking cm_margin_top_booking">Children (5-10):</label>
              <button class="enable-disable" type="button" onclick="increDecreValue('children','decrement')">-</button>
              <input id="children" name="children" class="cm_input_number_booking enable-disable" type="number" value="0" min="0" required />
              <button class="enable-disable" type="button" onclick="increDecreValue('children','increment')">+</button>
            </div>
          </div>
          <div class="note">
            <strong>Note:</strong> The "Add all person's detail" button will be enabled only after you increase the adult or child counter. Adjust the counters to add more persons.
          </div>
          <h4 class="mt-5">Personâ€™s details</h4>
          <div id="personDetailsContainer">
            <div class="person-details" id="person1">
              <div class="header_section_booking">
                <h4>Person 1</h4>
              </div>
              <div class="cm_row_booking">
                <div>
                  <label class="cm_label_booking">First name <span class="text-danger">*</span></label>
                  <input id="firstName" name="personDetails[0][firstName]" class="cm_field_booking enable-disable" type="text" required placeholder="Your name here" />
                </div>
                <div>
                  <label class="cm_label_booking">Surname <span class="text-danger">*</span></label>
                  <input id="Surname" name="personDetails[0][Surname]" class="cm_field_booking enable-disable" type="text" required placeholder="Your surname here" />
                </div>
              </div>
              <div class="cm_row_booking">
                <div>
                  <label class="cm_label_booking">Birth date <span class="text-danger">*</span></label>
                  <input id="dateofbirth" name="personDetails[0][dateofbirth]" class="cm_field_booking enable-disable form-control" required type="date" />
                </div>
                <div>
                  <label class="cm_label_booking form-label">Gender<span class="text-danger">*</span></label>
                  <select id="Gender" name="personDetails[0][Gender]" class="cm_field_booking enable-disable form-select" required>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
              </div>
              <div class="cm_row_booking">
                <div>
                  <label class="cm_label_booking">Mobile number <span class="text-danger">*</span></label>
                  <input id="mobileno" name="personDetails[0][mobileno]" class="cm_field_booking enable-disable" type="tel" placeholder="+91 Enter your mobile number" required pattern="\d{10}" />
                </div>
                <div>
                  <label class="cm_label_booking">Alternative number</label>
                  <input id="alternateNumber" name="personDetails[0][alternateNumber]" class="cm_field_booking enable-disable" type="tel" placeholder="+91 Enter alt mobile number" pattern="\d{10}?" />
                </div>
              </div>
            </div>
          </div>
          <button id="AddPerson" type="button" class="addperson-btn enable-disable" onclick="addPerson()">+ Add all person's detail</button>
          <label class="cm_label_booking" style="margin-top: 1rem;">Additional services (optional)</label>
        </div>
        <div class="summary_section_booking">
          <h3>Booking summary</h3>
          <p><strong><%= tourDetails.name %></strong></p>
          <p><%= tourDetails.days %></p>
          <p>Pickup from: <span id="pickupFrom"></span></p>
          <p>Travel date: <span id="travelDateDisplay"></span></p>
          <p><strong>Total costs:</strong>â‚¹<span id="totalCost"></span></p>
          <p>
            <a href="#" id="openCostModalBtn" data-bs-toggle="modal" data-bs-target="#costBreakdownModal">View Cost Breakdown</a>
          </p>
          <div class="alert alert-warning mt-4 mb-3">
            3AC train ticket and flight ticket charges will be applied after the actual ticket booking.
          </div>
          <div class="note">
            <strong>Note:</strong> Currently, only the full payment option is available. For advance payment, please contact us directly.
          </div>
          <div class="payment-options">
            <button class="cursor_not_allowed_booking" disabled>Pay full payment</button>
            <button class="cursor_not_allowed_booking" disabled>Pay part payment</button>
          </div>
          <label class="cm_label_booking">Amount to pay now</label>
          <input id="payingAmount" name="payingAmount" class="cm_field_booking" type="text" readonly />
          <p>Minimum should be 30% of total amount</p>
          <button id="submit" type="submit" class="payment-btn enable-disable">Pay â‚¹<span id="payingAmountDisplay"></span> now</button>
        </div>
      </div>
    </form>
  </div>
  <!-- Cost Breakdown Modal -->
  <div class="modal fade" id="costBreakdownModal" tabindex="-1" aria-labelledby="costBreakdownModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
      <div class="modal-content shadow-lg rounded-4">
        <div class="modal-header">
          <h5 class="modal-title" id="costBreakdownModalLabel">Cost Breakdown</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <h6 class="fw-bold"><%= tourDetails.name %></h6>
          <p class="mb-2 text-muted"><%= tourDetails.days %></p>
          <div class="row mb-3">
            <div class="col-md-6"><strong>Pickup from:</strong> <span id="ModelpickupFrom"></span></div>
            <div class="col-md-6"><strong>Travel date:</strong> <span id="ModeltravelDate"></span></div>
          </div>
          <h4 class="fw-bold mb-3">Total cost</h4>
          <table class="table">
            <thead>
              <tr>
                <th>Item</th>
                <th>Price</th>
                <th>Final Amount</th>
              </tr>
            </thead>
            <tbody id="costTableBody"></tbody>
          </table>
          <div class="d-flex justify-content-between border-top pt-2">
            <strong>Subtotal</strong>
            <span id="MSubtotal">â‚¹0000</span>
          </div>
          <div class="d-flex justify-content-between border-top pt-2">
            <strong>GST(5%)</strong>
            <span id="MGst">â‚¹0000</span>
          </div>
          <div class="d-flex justify-content-between border-top pt-2 fs-5">
            <strong>Total</strong>
            <strong id="MTotal">â‚¹0000</strong>
          </div>
          <div class="alert alert-warning mt-4 mb-0">
            3AC train ticket and flight ticket charges will be applied after the actual ticket booking.
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Message Modal -->
  <div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="messageModalLabel">Message</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" onclick="closeMsgModal()"></button>
        </div>
        <div class="modal-body" id="messageBody"></div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeMsgModal()">Close</button>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer'); %>
  <%- include('../partials/scripttag'); %>

  <!-- Transport Selection Set Form and Price -->
  <script>
    function populateForm() {
      const allFields = document.querySelectorAll('.enable-disable');
      allFields.forEach(field => {
        field.disabled = false;
        field.classList.remove('cursor_not_allowed_booking', 'opacity-50');
      });
      const transportType = document.getElementById('transportType');
      const transportList = <%- JSON.stringify(tourDetails.transportList) %>;
      const priceBaseOnTransportType = transportList.find((t) => t.transferType === transportType.value);
      const Adultprice = document.getElementById('Adultprice');
      const childprice = document.getElementById('childprice');
      Adultprice.value = priceBaseOnTransportType?.adultPrice || "0";
      childprice.value = priceBaseOnTransportType?.childPrice || "0";
      populateDates();
    }
  </script>

  <!-- Bind Travel Date based on Joining from Selection -->
  <script>
    const deptcities = <%- JSON.stringify(tourDetails.deptcities) %>;
    function populateDates(isFromLoad) {
      const selectedCity = (document.getElementById('joiningFrom').value || '').trim();
      const travelDateSelect = document.getElementById('travelDate');
      const pickupFrom = document.getElementById('pickupFrom');
      const ModelpickupFrom = document.getElementById('ModelpickupFrom');
      const ModeltravelDate = document.getElementById('ModeltravelDate');
      const travelDateDisplay = document.getElementById('travelDateDisplay');
      const cityObj = deptcities.find(loc => loc.City && loc.City.trim() === selectedCity);
      travelDateSelect.innerHTML = '<option value="" disabled selected>Select a date</option>';
      pickupFrom.innerHTML = ModelpickupFrom.innerHTML = selectedCity || 'N/A';
      if (cityObj && cityObj.dateList && cityObj.dateList.length > 0) {
        cityObj.dateList.forEach(element => {
          const option = document.createElement('option');
          option.value = element;
          option.textContent = element;
          travelDateSelect.appendChild(option);
        });
        if (!isFromLoad && cityObj.dateList[0]) {
          travelDateSelect.value = cityObj.dateList[0];
        }
      } else {
        const option = document.createElement('option');
        option.textContent = 'No Tour dates available';
        travelDateSelect.appendChild(option);
      }
      travelDateDisplay.innerHTML = ModeltravelDate.innerHTML = travelDateSelect.value || 'N/A';
      console.log("Dates populated, selected:", travelDateSelect.value);
      recalculateCost();
      if (typeof $.fn.niceSelect !== 'undefined') {
        $('#travelDate, #joiningFrom, #transportType, #Gender').each(function() {
          $(this).niceSelect('destroy').niceSelect();
        });
      }
    }
  </script>

  <!-- Update on changes of tour date -->
  <script>
    function onchangetoureDate() {
      const travelDateSelect = document.getElementById('travelDate');
      const travelDateDisplay = document.getElementById('travelDateDisplay');
      const ModeltravelDate = document.getElementById('ModeltravelDate');
      travelDateDisplay.innerHTML = ModeltravelDate.innerHTML = travelDateSelect.value || 'N/A';
      recalculateCost();
    }
 
    function recalculateCost() {
      const AdultpriceValue = document.getElementById('Adultprice').value.trim();
      const childpriceValue = document.getElementById('childprice').value.trim();
      const NoofAdutts = document.getElementById('adults').value.trim();
      const NoofChild = document.getElementById('children').value.trim();
      const totalCost = document.getElementById('totalCost');
      const payingAmountDisplay = document.getElementById('payingAmountDisplay');
      const payingAmount = document.getElementById('payingAmount');
      if (isNaN(parseInt(AdultpriceValue)) && isNaN(parseInt(childpriceValue))) {
        totalCost.innerHTML = payingAmountDisplay.innerHTML = '-';
        payingAmount.value = '';
      } else {
        const total = parseInt(NoofAdutts) * parseInt(AdultpriceValue) + parseInt(NoofChild) * parseInt(childpriceValue);
        totalCost.innerHTML = payingAmountDisplay.innerHTML = payingAmount.value = total;
      }
    }
    function increDecreValue(type, operation) {
      const el = document.getElementById(type);
      const personCount = document.getElementById("personDetailsContainer").children.length;
      const NoofAdutts = document.getElementById('adults').value.trim();
      const NoofChild = document.getElementById('children').value.trim();
      if (operation === 'increment') {
        el.value = parseInt(el.value) + 1;
        const addPerson = document.getElementById('AddPerson');
        addPerson.style.display = 'block';
      } else {
        if (parseInt(personCount) < (parseInt(NoofAdutts) + parseInt(NoofChild)) || ((type == 'adults' && parseInt(el.value) == 1) || parseInt(el.value) == 0)) {
          el.value = ((type == 'adults' && parseInt(el.value) == 1) || parseInt(el.value) == 0) ? el.value : parseInt(el.value) - 1;
        } else {
          toastr.error("Person details already added. Remove a person first to reduce the count.");
        }
      }
      recalculateCost();
    }

    function addPerson() {
      const personContainer = document.getElementById("personDetailsContainer");
      const personCount = personContainer.children.length + 1;
      const NoofAdutts = document.getElementById('adults').value.trim();
      const NoofChild = document.getElementById('children').value.trim();
      if (parseInt(personContainer.children.length) < (parseInt(NoofAdutts) + parseInt(NoofChild))) {
        let personDiv = document.createElement("div");
        personDiv.classList.add("person-details", "border-top", "border-secondary");
        personDiv.id = `person${personCount}`;
        personDiv.innerHTML = `
          <div class="cm_row_booking pt-2 header_section_booking">
            <h4>Person ${personCount}</h4>
            <button id="removePerson${personCount}" type="button" class="remove-btn" onclick="removePerson(${personCount})">x</button>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">First name*</label>
              <input id="firstName" name="personDetails[${personCount - 1}][firstName]" class="cm_field_booking" type="text" required placeholder="Your name here" />
            </div>
            <div>
              <label class="cm_label_booking">Surname*</label>
              <input id="Surname" name="personDetails[${personCount - 1}][Surname]" class="cm_field_booking" type="text" required placeholder="Your surname here" />
            </div>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">Birth date*</label>
              <input id="dateofbirth" name="personDetails[${personCount - 1}][dateofbirth]" class="cm_field_booking" required type="date" />
            </div>
            <div>
              <label class="cm_label_booking">Gender*</label>
              <select id="Gender" name="personDetails[${personCount - 1}][Gender]" class="cm_field_booking form-select" required>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
              </select>
            </div>
          </div>
          <div class="cm_row_booking">
            <div>
              <label class="cm_label_booking">Mobile number*</label>
              <input id="mobileno" name="personDetails[${personCount - 1}][mobileno]" class="cm_field_booking" type="tel" placeholder="+91 Enter your mobile number" required pattern="\d{10}" />
            </div>
            <div>
              <label class="cm_label_booking">Alternative number</label>
              <input id="alternateNumber" name="personDetails[${personCount - 1}][alternateNumber]" class="cm_field_booking" type="tel" placeholder="+91 Enter alt mobile number" pattern="\d{10}?" />
            </div>
          </div>`;
        personContainer.appendChild(personDiv);
        const addPerson = document.getElementById('AddPerson');
        addPerson.style.display = parseInt(personContainer.children.length) == (parseInt(NoofAdutts) + parseInt(NoofChild)) ? 'none' : 'block';
        if (typeof $.fn.niceSelect !== 'undefined') {
          $(`#person${personCount} #Gender`).niceSelect();
        }
      }
    }

    function removePerson(removePersonId) {
      console.log("removePerson called:", removePersonId);
      let div = document.getElementById(`person${removePersonId}`);
      if (div) {
        div.remove();
      }
      const addPerson = document.getElementById('AddPerson');
      addPerson.style.display = 'block';
    }

    window.onload = () => {
      const allFields = document.querySelectorAll('.enable-disable');
      const transportType = document.getElementById('transportType').value.trim();
      if (!transportType) {
        allFields.forEach(field => {
          field.disabled = true;
          field.classList.add('cursor_not_allowed_booking', 'opacity-50');
        });
      }
      populateDates('onload');
    };
  </script>

  <!-- Close Message Modal -->
  <script>
    const msgModal = new bootstrap.Modal(document.getElementById("messageModal"));
    function closeMsgModal() {
      msgModal.hide();
    }
  </script>

  <!-- Cost Breakdown Modal Trigger -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      document.getElementById("openCostModalBtn").addEventListener("click", function () {
        const costTable = document.getElementById("costTableBody");
        costTable.innerHTML = "";
        const AdultpriceValue = document.getElementById('Adultprice').value.trim();
        const childpriceValue = document.getElementById('childprice').value.trim();
        const NoofAdutts = document.getElementById('adults').value.trim();
        const NoofChild = document.getElementById('children').value.trim();
        const costDetails = [
          { label: "Adults", quantity: NoofAdutts, price: AdultpriceValue, total: NoofAdutts * AdultpriceValue },
          { label: "Child", quantity: NoofChild, price: childpriceValue, total: NoofChild * childpriceValue },
        ];
        const subtotalAmountValue = (NoofAdutts * AdultpriceValue) + (NoofChild * childpriceValue);
        const gstAmountValue = subtotalAmountValue * 0.05;
        const totalAmount = subtotalAmountValue + gstAmountValue;
        costDetails.forEach(item => {
          const row = `<tr>
            <td>${item.label}</td>
            <td>${item.quantity} x â‚¹${item.price}</td>
            <td>â‚¹${item.total}</td>
          </tr>`;
          costTable.innerHTML += row;
        });
        document.getElementById("MSubtotal").textContent = `â‚¹${subtotalAmountValue}`;
        document.getElementById("MGst").textContent = `â‚¹${gstAmountValue}`;
        document.getElementById("MTotal").textContent = `â‚¹${totalAmount}`;
      });
    });
  </script>

  <!-- Login and Payment Handling -->
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Initialize modals
      let loginModal, verifyModal, msgModal;
      try {
        loginModal = new bootstrap.Modal(document.getElementById("loginModal"), { keyboard: false });
        verifyModal = new bootstrap.Modal(document.getElementById("verifyModal"), { keyboard: false });
        msgModal = new bootstrap.Modal(document.getElementById("messageModal"), { keyboard: false });
      } catch (error) {
        console.error("Modal initialization error:", error);
        toastr.error("Failed to initialize modals.");
        return;
      }

      let tempBookingData = null;

      // Check if user is logged in
   

      // Validate mobile number
      document.getElementById("phoneNumber").addEventListener("input", function() {
        console.log("Phone number input");
        const sendCodeBtn = document.getElementById("sendCodeBtn");
        const isValid = /^\d{10}$/.test(this.value);
        sendCodeBtn.disabled = !isValid;
        sendCodeBtn.classList.toggle("btn-disabled", !isValid);
      });

      // Handle Send OTP
      document.getElementById("getotp").addEventListener("submit", function(event) {
        event.preventDefault();
        console.log("getotp form submitted");
        const mobileNumber = document.getElementById("phoneNumber").value;
        const formData = new FormData(document.getElementById("getotp"));
        formData.append("phone", mobileNumber);

        fetch("/getotp", {
          method: "POST",
          body: formData
        })
        .then(response => {
          console.log("getotp response status:", response.status);
          return response.json();
        })
        .then(data => {
          console.log("getotp response data:", data);
          if (data.success) {
            toastr.success("OTP sent successfully.");
            document.getElementById("mobileNumber2").value = mobileNumber;
            document.getElementById("phoneNumberDisplay").textContent = "+91 " + mobileNumber;
            loginModal.hide();
            verifyModal.show();
          } else {
            toastr.error(data.message || "Failed to send OTP.");
          }
        })
        .catch(err => {
          console.error("getotp error:", err);
          toastr.error("Error sending OTP.");
        });
      });

      // Handle Edit Phone Number
      document.getElementById("editPhone").addEventListener("click", function() {
        console.log("Edit phone clicked");
        const phoneNumber = document.getElementById("phoneNumberDisplay").textContent.replace("+91 ", "");
        document.getElementById("phoneNumber").value = phoneNumber;
        verifyModal.hide();
        loginModal.show();
      });

      // Handle OTP Input
      const otpInputs = document.querySelectorAll(".otp-input");
      otpInputs.forEach((input, index) => {
        input.addEventListener("input", function() {
          console.log(`OTP input ${index + 1}:`, this.value);
          this.value = this.value.replace(/\D/g, "");
          if (this.value && index < otpInputs.length - 1) {
            otpInputs[index + 1].focus();
          }
          validateOTP();
        });
        input.addEventListener("keydown", function(e) {
          if (e.key === "Backspace" && !this.value && index > 0) {
            otpInputs[index - 1].focus();
          }
        });
      });

      function validateOTP() {
        console.log("Validating OTP");
        const allFilled = [...otpInputs].every(input => /^[0-9]$/.test(input.value));
        const verifyBtn = document.getElementById("verifyBtn");
        verifyBtn.disabled = !allFilled;
        verifyBtn.classList.toggle("btn-disabled", !allFilled);
      }

      // Handle Resend OTP
      document.querySelector(".resend-link").addEventListener("click", function(e) {
        e.preventDefault();
        console.log("Resend OTP clicked");
        const phoneNumber = document.getElementById("mobileNumber2").value;
        const formData = new FormData(document.getElementById("verifyotp"));
        formData.append("phone", phoneNumber);
        startResendTimer();

        fetch("/getotp", {
          method: "POST",
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            toastr.success("OTP resent successfully.");
          } else {
            toastr.error(data.message || "Failed to resend OTP.");
          }
        })
        .catch(err => {
          console.error("Resend OTP error:", err);
          toastr.error("Error resending OTP.");
        });
      });

      function startResendTimer() {
        console.log("Starting resend timer");
        const resendLink = document.querySelector(".resend-link");
        const timerDisplay = document.getElementById("timerDisplay");
        resendLink.style.pointerEvents = "none";
        let timeLeft = 10;
        const resendTimer = setInterval(() => {
          if (timeLeft <= 0) {
            clearInterval(resendTimer);
            timerDisplay.innerHTML = "";
            resendLink.style.pointerEvents = "auto";
          } else {
            timerDisplay.innerHTML = ` (Wait ${timeLeft--}s)`;
          }
        }, 1000);
      }

      // Handle Verify OTP
      document.getElementById("verifyotp").addEventListener("submit", function(event) {
        event.preventDefault();
        console.log("verifyotp form submitted");
        const verifyBtn = document.getElementById("verifyBtn");
        verifyBtn.innerHTML = "Verifying...";
        verifyBtn.disabled = true;

        const fullOtp = [...otpInputs].map(input => input.value).join("");
        document.getElementById("otp").value = fullOtp;
        const formData = new FormData(document.getElementById("verifyotp"));

        fetch("/verifyotp", {
          method: "POST",
          body: formData
        })
        .then(response => {
          console.log("verifyotp response status:", response.status);
          return response.json();
        })
        .then(data => {
          console.log("verifyotp response data:", data);
          if (data.success) {
            toastr.success("Login successful.");
            document.cookie = `accessToken=${data.accessToken}; path=/; SameSite=Strict`;
            verifyModal.hide();
            if (tempBookingData) {
              console.log("Submitting stored booking data");
              submitBooking(tempBookingData);
            }
          } else {
            toastr.error(data.message || "Invalid OTP.");
          }
        })
        .catch(err => {
          console.error("verifyotp error:", err);
          toastr.error("Error verifying OTP.");
        })
        .finally(() => {
          verifyBtn.innerHTML = "Verify Code";
          verifyBtn.disabled = false;
        });
      });

      // Validate and collect form data
      function validateAndCollectData() {
        let isShowMessage = false;
        let message = "";
        try {
          const NoofAdutts = document.getElementById("adults").value.trim();
          const NoofChild = document.getElementById("children").value.trim();
          const transportType = document.getElementById("transportType").value;
          const travelDate = document.getElementById("travelDate").value;
          const joiningFrom = document.getElementById("joiningFrom").value.trim();
          // Check required fields
          if (!transportType) {
            isShowMessage = true;
            message += "<li><p class='text-danger'>â€¢ Please select a transport type.</p></li>";
          }
          if (!travelDate) {
            isShowMessage = true;
            message += "<li><p class='text-danger'>â€¢ Please select a travel date.</p></li>";
          }
          if (!joiningFrom) {
            isShowMessage = true;
            message += "<li><p class='text-danger'>â€¢ Please select a joining city.</p></li>";
          }
          if (!NoofAdutts || parseInt(NoofAdutts) < 1) {
            isShowMessage = true;
            message += "<li><p class='text-danger'>â€¢ At least one adult is required.</p></li>";
          }

          // Validate person details
          let nofAdlutDetail = 0;
          let noofChildDetail = 0;
          const dobList = document.querySelectorAll('[id="dateofbirth"]');
          const today = new Date();
          dobList.forEach((ele, index) => {
            const dobValue = ele.value;
            if (!dobValue) {
              isShowMessage = true;
              message += `<li><p class='text-danger'>â€¢ Birth date for person ${index + 1} is required.</p></li>`;
              return;
            }
            const dob = new Date(dobValue);
            if (isNaN(dob.getTime())) {
              isShowMessage = true;
              message += `<li><p class='text-danger'>â€¢ Invalid birth date for person ${index + 1}.</p></li>`;
              return;
            }
            let age = today.getFullYear() - dob.getFullYear();
            const monthDiff = today.getMonth() - dob.getMonth();
            const dayDiff = today.getDate() - dob.getDate();
            if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
              age--;
            }
            console.log(`Person ${index + 1} age:`, age);
            if (age > 10) {
              nofAdlutDetail++;
            } else if (age >= 5) {
              noofChildDetail++;
            } else {
              isShowMessage = true;
              message += `<li><p class='text-danger'>â€¢ Person ${index + 1} is too young (age ${age}). Minimum age is 5.</p></li>`;
            }
          });

          // Validate counts
          if (nofAdlutDetail < parseInt(NoofAdutts)) {
            isShowMessage = true;
            message += `<li><p class='text-danger'>â€¢ Selected ${NoofAdutts} adults, but only ${nofAdlutDetail} provided based on birth dates.</p></li>`;
          }
          if (noofChildDetail < parseInt(NoofChild)) {
            isShowMessage = true;
            message += `<li><p class='text-danger'>â€¢ Selected ${NoofChild} children, but only ${noofChildDetail} provided based on birth dates.</p></li>`;
          }

          if (isShowMessage) {
            const messageBody = document.getElementById("messageBody");
            messageBody.innerHTML = "<ul>" + message + "</ul>";
            msgModal.show();
            return null;
          }

          // Collect form data
          const form = document.getElementById("bookingForm");
          const formData = new FormData(form);
          const data = {
            _csrf: formData.get("_csrf"),
            tourDetails: <%- JSON.stringify(tourDetails) %>,
            transportType,
            joiningFrom,
            travelDate,
            totalPerson: {
              adult: NoofAdutts,
              child: NoofChild
            },
            childPrice: formData.get("childprice") || "0",
            adultPrice: formData.get("Adultprice") || "0",
            paidAmount: formData.get("payingAmount") || "0",
            totalTripCost: formData.get("payingAmount") || "0",
            bookingStatus: "Pending",
            paymentStatus: "Pending",
            personDetails: []
          };
          console.log("Collecting person details...");
          for (let i = 0; i < (parseInt(NoofAdutts) + parseInt(NoofChild)); i++) {
            const firstName = formData.get(`personDetails[${i}][firstName]`);
            if (!firstName) {
              break;
            }
            data.personDetails.push({
              firstName,
              surname: formData.get(`personDetails[${i}][Surname]`) || "",
              gender: formData.get(`personDetails[${i}][Gender]`) || "",
              birthdate: formData.get(`personDetails[${i}][dateofbirth]`) || "",
              phone: formData.get(`personDetails[${i}][mobileno]`) || "",
              altphone: formData.get(`personDetails[${i}][alternateNumber]`) || ""
            });
          }
          debugger;
          return data;
        } catch (error) {
          message = "<li><p class='text-danger'>â€¢ An error occurred while validating. Please check your inputs.</p></li>";
          const messageBody = document.getElementById("messageBody");
          messageBody.innerHTML = "<ul>" + message + "</ul>";
          msgModal.show();
          return null;
        }
      }

      // Submit booking to server
      function submitBooking(data) {
        fetch("/bookingTour", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data)
        })
        .then(response => {
          return response.json();
        })
        .then(result => {
          if (result.success) {
            toastr.success("Booking saved successfully. Proceeding to payment.");
            proceedToPayment(result.regId);
          } else {
            toastr.error(result.message || "Failed to save booking.");
          }
        })
        .catch(err => {
          toastr.error("Error saving booking.");
        });
      }

      // Proceed to Razorpay payment
      function proceedToPayment(bookingId) {
        const formData = new FormData(document.getElementById("bookingForm"));
        const paymentData = {
          _csrf: formData.get("_csrf"),
          cost: formData.get("payingAmount"),
          bookingId: bookingId,
          name: formData.get("personDetails[0][firstName]") + " " + formData.get("personDetails[0][Surname]"),
          email: "user@example.com",
          contact: formData.get("personDetails[0][mobileno]"),
          destination: "<%= tourDetails.name %>",
          tripdate: document.getElementById("travelDate").value,
          travellers: document.getElementById("adults").value + " Adults, " + document.getElementById("children").value + " Children"
        };
        fetch("/payment/order", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(paymentData)
        })
        .then(response => {
          console.log("payment/order response status:", response.status);
          if (!response.ok) throw new Error("Payment order failed");
          return response.json();
        })
        .then(data => {
          console.log("payment/order response data:", data);
          if (data.success) {
            const options = {
              key: data.razorpayKeyId,
              amount: data.paymentDetail.amount,
              currency: data.paymentDetail.currency,
              name: "Trip Payment",
              description: "Trip Payment",
              order_id: data.paymentDetail.orderId,
              handler: function(response) {
                console.log("Razorpay payment response:", response);
                fetch("/payment/verify", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_signature: response.razorpay_signature,
                    _csrf: formData.get("_csrf"),
                    bookingId: bookingId
                  })
                })
                .then(response => {
                  console.log("payment/verify response status:", response.status);
                  return response.json();
                })
                .then(verifyData => {
                  console.log("payment/verify response data:", verifyData);
                  if (verifyData.success) {
                    const messageBody = document.getElementById("messageBody");
                    messageBody.innerHTML = "<p class='text-success'>Your trip booking is confirmed! You'll receive a confirmation soon.</p>";
                    msgModal.show();
                    setTimeout(() => {
                      msgModal.hide();
                      window.location.href = "/profile";
                    }, 3000);
                  } else {
                    toastr.error(verifyData.message || "Payment verification failed.");
                  }
                })
                .catch(err => {
                  console.error("payment/verify error:", err);
                  toastr.error("Payment verification failed.");
                });
              },
              modal: {
                ondismiss: function() {
                  console.log("Razorpay modal dismissed");
                  toastr.error("Payment cancelled.");
                }
              },
              theme: { color: "#002d66" }
            };
            console.log("Opening Razorpay with options:", options);
            const razorpay = new Razorpay(options);
            razorpay.open();
          } else {
            toastr.error(data.message || "Failed to create payment order.");
          }
        })
        .catch(err => {
          console.error("payment/order error:", err);
          toastr.error("Failed to initiate payment.");
        });
      }

      // Form submit handler
      const form = document.getElementById("bookingForm");
      if (!form) {
        console.error("bookingForm not found");
        toastr.error("Form not found. Please contact support.");
        return;
      }
      form.onsubmit = null; // Clear any existing handlers
      form.addEventListener("submit", function(e) {
        e.preventDefault();
        debugger;
        console.log("Submit event triggered at:", new Date().toISOString());
        try {
          // Check HTML5 validation
          if (!form.checkValidity()) {
            console.log("Form failed HTML5 validation");
            form.reportValidity();
            return;
          }
          console.log("Validating form data...");
          const data = validateAndCollectData();
          console.log("Validation result:", data);
          if (!data) {
            console.log("Validation failed, stopping.");
            return;
          }
          console.log("Checking login, isUserLoggedIn:", isUserLoggedIn());
          if (!isUserLoggedIn()) {
            console.log("Not logged in, storing data and showing modal");
            tempBookingData = data;
            loginModal.show();
          } else {
            console.log("Logged in, submitting booking");
            submitBooking(data);
          }
        } catch (error) {
          console.error("Submission error:", error);
          toastr.error("An error occurred. Check console for details.");
        }
      });

      // Reset NiceSelect
      if (typeof $.fn.niceSelect !== 'undefined') {
        console.log("Resetting NiceSelect");
        $('#bookingForm select').each(function() {
          $(this).niceSelect('destroy');
          $(this).niceSelect();
        });
      }
    });
  </script>
</body>
</html>
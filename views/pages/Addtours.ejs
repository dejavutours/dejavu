<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <%- include('../partials/headtag'); %>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous" />
  <!-- Bootstrap Icons CDN (Required if not already included) -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
  <!-- FilePond CSS & JS -->
  <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <!-- Date selector calender -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

  <!-- FilePond Plugins -->
  <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet" />

  <!-- Quill CSS -->
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <title>Dejavu Add Tours Details</title>
  <style>
    .form-container {
      background: #fff;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      margin: auto;
    }

    .form-label b {
      font-size: 0.9rem;
    }

    .preview-container {
      margin-top: 10px;
    }

    .preview-container img {
      max-width: 100%;
      height: auto;
      cursor: pointer;
    }

    .multiple-preview img {
      width: 100px;
      height: 100px;
      margin-right: 10px;
      cursor: pointer;
      object-fit: cover;
    }

    .modal img {
      width: 100%;
    }
  </style>
</head>

<body class="bg-light text-dark">
  <header>
    <div class="header-area">
      <div id="sticky-header" class="main-header-area">
        <div class="container-fluid">
          <div class="header_bottom_border">
            <div class="row align-items-center">
              <div class="col-xl-2 col-lg-2">
                <div class="logo">
                  <a href="index.html">
                    <img src="/images/logo.png" alt="" />
                  </a>
                </div>
              </div>
              <div class="col-xl-7 col-lg-7">
                <div class="main-menu d-none d-lg-block">
                  <nav>
                    <ul id="navigation">
                      <li>
                        <a href="/">Home</a>
                      </li>
                      <% if (profile?.email === process.env.GMAIL_ADMIN) { %>
                      <li>
                        <a href="/admin/addtours">AddTours</a>
                      </li>
                      <li>
                        <a href="/admin/addaccomodation">AddAccod</a>
                      </li>
                      <li>
                        <a href="/admin/accoddetails">Accod</a>
                      </li>
                      <li>
                        <a href="/admin/viewregistration">Reg</a>
                      </li>
                      <li>
                        <a href="/admin/viewmails">Mail</a>
                      </li>
                      <li>
                        <a href="/admin/code">Code</a>
                      </li>
                      <li>
                        <a href="/admin/addblog">Blog</a>
                      </li>
                      <li>
                        <form action="/admin/logout" method="post">
                          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
                          <button type="submit" class="btn btn-primary">
                            Logout
                          </button>
                        </form>
                      </li>

                      <% } %>
                    </ul>
                  </nav>
                </div>
              </div>
              <div class="col-xl-3 col-lg-3 d-none d-lg-block">
                <div class="social_wrap d-flex align-items-center justify-content-end">
                  <div class="social_links d-none d-xl-block">
                    <ul>
                      <li>
                        <a href="https://www.instagram.com/dejavutours/">
                          <i class="fa fa-instagram"></i>
                        </a>
                      </li>
                      <li>
                        <a href="https://www.youtube.com/watch?v=56-u7Pv-cQg">
                          <i class="fa fa-youtube-play"></i>
                        </a>
                      </li>
                      <li>
                        <a href="https://www.facebook.com/dejavutours.in">
                          <i class="fa fa-facebook"></i>
                        </a>
                      </li>
                      <li>
                        <a href="https://twitter.com/dejavutours_in">
                          <i class="fa fa-twitter"></i>
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
              <div class="seach_icon">
                <a data-toggle="modal" data-target="#exampleModalCenter" href="#">
                  <i class="fa fa-search"></i>
                </a>
              </div>
              <div class="col-12">
                <div class="mobile_menu d-block d-lg-none"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>
  <!-- header-end -->
  <h1 class="text-primary">
    <center>Dejavu Tours&Treks : Add Trip</center>
  </h1>
  <form action="/admin/postNewAddTours" method="POST" id="addUpdateTripDetial" enctype="multipart/form-data">
    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
    <div class="container-fluid">
      <div class="container form-container">
        <div class="row">
          <div class="col-12 col-lg-12 col-sm-12">
            <div class="mb-3">
              <h5 class="mt-3">Trip Name <b class="text-success">* Trip name must be unique</b></h5>
              <input type="text" class="form-control" name="name" id="name" value="<%= trips.name %>" placeholder="Enter Trip Name" required />
              <input type="hidden" class="form-control" name="tripId" id="tripId" value="<%= trips._id %>"" />
              <small id=" nameError" class="text-danger d-none">Trip name already exists!</small>
            </div>
          </div>
        </div>
        <!-- state and destination input field -->
        <div class="row">
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="state" class="form-label">State</label>
              <select class="form-control select2" name="state" id="state" data-placeholder="Select a State" style="width: 100%" required>
                <option value="<%= trips.state %>" selected hidden><%= trips.state %></option>
                <% for (var i = 0; i < states_arr.length; i++) { %>
                <option value="<%= states_arr[i] %>"><%= states_arr[i] %></option>
                <% } %>
              </select>
            </div>
          </div>
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="Destinations" class="form-label">Destinations</label>
              <input type="text" class="form-control" name="destinations" id="destinations" placeholder="" value="<%= trips.destinations %>" required />
            </div>
          </div>
        </div>

        <!-- Image upload input field for main and banner -->
        <div class="row">
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="file" class="form-label">Upload Image</label>
              <input type="file" accept="image/*" name="image" id="file" enctype="multipart/form-data" class="form-control">
              <div class="preview-container position-relative" id="mainImagePreviewContainer" style="display: <%= trips.imageurl ? 'block' : 'none' %>;">
                <img id="mainImagePreview" alt="Preview" data-bs-toggle="modal" src="<%= trips.imageurl ? trips.imageurl : '' %>" data-bs-target="#imageModal" style="display: <%= trips.imageurl ? 'block' : 'none' %>;">
                <button type="button" class="btn btn-danger remove-image" id="removeMainImage" style="position: absolute; top: 5px; right: 5px; padding: 5px; display: <%= trips.imageurl ? 'block' : 'none' %>;">
                  <i class="bi bi-x-circle-fill"></i> <!-- Bootstrap Icon -->
                </button>
              </div>
            </div>
          </div>
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="bannerImages" class="form-label">Upload Banner Images (Multiple)</label>
              <input type="file" accept="image/*" name="bannerImages[]" id="bannerImages" class="form-control" multiple>
              <div class="multiple-preview d-flex mt-2" id="bannerPreviewContainer"></div>
            </div>
          </div>
        </div>
        <!-- Input field route and day's -->
        <div class="row">
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="Route" class="form-label">Route</label>
              <input type="text" class="form-control" name="route" id="route" placeholder="" value="<%= trips.route %>" required="" />
            </div>
          </div>
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="Route" class="form-label">Trip Duration </label>
              <input type="text" class="form-control" name="days" id="days" placeholder="" value="<%= trips.days %>" required="" />
            </div>
          </div>
        </div>

        <!-- Input field tab line and price -->
        <div class="row">
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="TagLine" class="form-label">Tag Line</label>
              <input type="text" class="form-control" name="tag" id="tag" placeholder="" value="<%= trips.tag %>" required="" />
            </div>
          </div>
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="altitude" class="form-label">Altitude</label>
              <input type="text" class="form-control" name="altitude" id="altitude" placeholder="" value="<%= trips.altitude %>" required="" />
            </div>
          </div>
        </div>
        <!-- Input field Difficulty and Altitude -->
        <div class="row">
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="tripType" class="form-label">Difficulty</label>tripType
              <input type="text" class="form-control" name="tripType" id="tripType" placeholder="" value="<%= trips.tripType %>" required="" />
            </div>
          </div>
          <div class="col-12 col-md-6">
            <div class="mb-3">
              <label for="Price" class="form-label">Price(Price per person)</label>
              <input type="text" class="form-control" name="price" id="price" placeholder="" value="<%= trips.price %>" required="" />
            </div>
          </div>
        </div>
        <!-- Input field Best Session -->
        <div class="row">
          <div class="col-12 col-md-12">
            <div class="mb-3">
              <label for="bestSession" class="form-label">Best Session</label>
              <input type="text" class="form-control" name="bestSession" id="bestSession" placeholder="" value="<%= trips.bestSession %>" required="" />
            </div>
          </div>
        </div>

        <!-- Add departure city section -->
        <div class="row">
          <div class="col-12 border rounded mt-2">
            <h5 class="mt-3">Add Departure City <b class="text-success">* Departure City must be unique</b></h5>
            <div id="cityContainer">
              <div class="city-entry">
                <div class="row">
                  <div class="col-12 text-end">
                    <button type="button" class="btn btn-danger btn-sm remove-city d-none">
                      <i class="bi bi-x-circle"></i> Remove Section
                    </button>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>City</label>
                      <select class="form-select city-select" required>
                        <option value="">Select City</option>
                      </select>
                    </div>
                  </div>
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>City Image</label>
                      <img src="" class="img-fluid city-image" style="display: none; max-width: 100px;">
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>State</label>
                      <input type="text" class="form-control state-field" placeholder="State" readonly required>
                    </div>
                  </div>
                </div>
                <h5 class="mt-3">Pricing Details</h5>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="basePrice" class="form-label">Base Price (Total trip cost)</label>
                      <input type="number" class="form-control cost-field" id="basePrice" placeholder="Enter base price" required>
                    </div>
                  </div>
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>Transfer Type</label>
                      <input type="text" class="form-control transferType" name="transferType" placeholder="Transfer Type" required>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="childPrice" class="form-label">Child Price</label>
                      <input type="number" class="form-control" name="childPrice" id="childPrice" placeholder="Enter price per child" required />
                    </div>
                  </div>
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="adultPrice" class="form-label">Adult Price</label>
                      <input type="number" class="form-control adultPrice" id="adultPrice" placeholder="Enter price per adult" required>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="infantPrice" class="form-label">Infant Price</label>
                      <input type="number" class="form-control" name="infantPrice" id="infantPrice" placeholder="Enter price per infant (if applicable)" />
                    </div>
                  </div>
                  <!-- Date Picker Input -->
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <h6 class="mt-3">Available Dates</h5>
                        <div class="input-group">
                          <input type="text" id="datePicker" class="form-control datePicker" placeholder="Select multiple dates">
                          <button class="btn btn-danger clearDates" id="clearDates">Clear</button>
                        </div>
                        <small class="text-danger d-none error-msg" id="error-msg">Please select at least one date.</small>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <!-- Scrollable Table for Selected Dates -->
                  <div class="col-12 col-md-12">
                    <div class="mb-3">
                      <label class="form-label fw-bold"></label>
                      <div class="table-responsive" style="max-height: 250px; overflow-y: auto;">
                        <table class="table table-bordered table-hover align-middle">
                          <thead class="table-light sticky-top">
                            <tr>
                              <th class="text-center" style="width: 10%;">S.No.</th>
                              <th class="text-center" style="width: 60%;">Selected Date</th>
                              <th class="text-center" style="width: 30%;">Action</th>
                            </tr>
                          </thead>
                          <tbody id="datePreview">
                            <!-- Dynamic Rows Will Be Inserted Here -->
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 d-flex mb-3">
                    <button type="button" class="btn btn-primary btn-sm addCity" id="addCity">
                      <i class="bi bi-plus-circle"></i> Add City
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#aboutCollapse" aria-expanded="false" aria-controls="aboutCollapse">
                    About Information
                  </button>
                </h2>
                <div id="aboutCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="about" id="about-editor"><%- trips.about %></div>
                    <small class="text-danger d-none" id="aboutError">About field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="placestovisitAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="placestovisitHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#placestovisitCollapse" aria-expanded="false" aria-controls="placestovisitCollapse">
                    Places To Visit
                  </button>
                </h2>
                <div id="placestovisitCollapse" class="accordion-collapse collapse" aria-labelledby="placestovisitHeading" data-bs-parent="#placestovisitAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="placestovisit" id="placestovisit-editor"><%- trips.placestovisit %></div>
                    <small class="text-danger d-none" id="placestovisitError">placestovisit field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#activitiesCollapse" aria-expanded="false" aria-controls="activitiesCollapse">
                    Activities & Attraction
                  </button>
                </h2>
                <div id="activitiesCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="activities" id="activities-editor"><%- trips.activities %></div>
                    <small class="text-danger d-none" id="activitiesError">activities field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="mb-3">
              <label for="itinerary" class="form-label">Itinerary</label>
              <div class="d-flex justify-content-between mb-3">
                <button id="add-day" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add Day</button>
                <button id="remove-day" class="btn btn-danger" disabled><i class="bi bi-trash"></i> Remove Day</button>
              </div>

              <!-- Container for multiple itinerary editors -->
              <div id="itinerary-container">
                <div class="itinerary-day p-3 mb-3" data-day="1">
                  <h5>Day 1</h5>
                  <input type="text" class="form-control" name="itinerary-header" id="itinerary-header" placeholder="Enter Header" value="" required="" />
                  <div class="editor-container mb-3" id="editor-1"></div>
                  <input type="hidden" name="content[]" class="quill-content">
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#things_to_carryCollapse" aria-expanded="false" aria-controls="things_to_carryCollapse">
                    Things to Carry
                  </button>
                </h2>
                <div id="things_to_carryCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="things_to_carry" id="things_to_carry-editor"><%- trips.things_to_carry %></div>
                    <small class="text-danger d-none" id="activitiesError">activities field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#includenexcludeCollapse" aria-expanded="false" aria-controls="includenexcludeCollapse">
                    Include & Exclude
                  </button>
                </h2>
                <div id="includenexcludeCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="includenexclude" id="includenexclude-editor"><%- trips.includenexclude %></div>
                    <small class="text-danger d-none" id="activitiesError">includenexclude field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#package_costCollapse" aria-expanded="false" aria-controls="package_costCollapse">
                    Package Cost
                  </button>
                </h2>
                <div id="package_costCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="package_cost" id="package_cost-editor"><%- trips.package_cost %></div>
                    <small class="text-danger d-none" id="package_costError">package cost field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#infonfaqCollapse" aria-expanded="false" aria-controls="infonfaqCollapse">
                    Info & FAQs
                  </button>
                </h2>
                <div id="infonfaqCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="infonfaq" id="infonfaq-editor"><%- trips.infonfaq %></div>
                    <small class="text-danger d-none" id="infonfaqError">infonfaq field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#bookncancelCollapse" aria-expanded="false" aria-controls="bookncancelCollapse">
                    Booking & Cancellation
                  </button>
                </h2>
                <div id="bookncancelCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="bookncancel" id="bookncancel-editor"><%- trips.bookncancel %></div>
                    <small class="text-danger d-none" id="bookncancelError">bookncancel field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <div class="accordion mb-3" id="aboutAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header" id="aboutHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#guidelinesCollapse" aria-expanded="false" aria-controls="guidelinesCollapse">
                    Travel Guidelines
                  </button>
                </h2>
                <div id="guidelinesCollapse" class="accordion-collapse collapse" aria-labelledby="aboutHeading" data-bs-parent="#aboutAccordion">
                  <div class="accordion-body">
                    <div class="editor-container mb-3" name="guidelines" id="guidelines-editor"><%- trips.guidelines %></div>
                    <small class="text-danger d-none" id="guidelinesError">Guidelines field is required (Max: 500 characters).</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12 col-md-12">
            <button type="submit" id="submitBtn" class="btn btn-primary">Submit</button>
          </div>
        </div>
      </div>
    </div>
  </form>
  <!-- Modal for Full-Size Preview -->
  <div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Image Preview</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body text-center">
          <img id="fullSizeImage" alt="Full Preview">
        </div>
      </div>
    </div>
  </div>

  <!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script> -->
  <script src="/vendor/jquery/jquery.min.js"></script>
  <script src="/vendor/select2/select2.min.js"></script>
  <script src="/js/jquery-te-1.4.0.min.js" charset="utf-8"></script>

  <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
  <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
  <!-- Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

  <!-- Quill JS -->
  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
  <!-- Image Resize Module (Correct Version) -->
  <script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>



  <script>
    $(document).ready(function() {
      $(".select2").select2();
    });

    $("#imageModal").on("hidden.bs.modal", function() {
      $(".modal-backdrop").remove();
      $("body").removeClass("modal-open");
    });
    // Get CSRF token from hidden input field
    const csrfToken = document.querySelector('input[name="_csrf"]').value;
    // Form validation and  error message
    $(document).ready(function() {
      let lastCheckedName = ""; // Store last checked name to prevent duplicate requests

      $("#name").on("blur", function() {
        let tripName = $(this).val().trim();
        const tripId = $('#tripId').val()
        if (tripName === "" || tripName === lastCheckedName) return; // Skip if empty or already checked

        lastCheckedName = tripName; // Update last checked name

        $.ajax({
          url: "/getCheckToursUnique",
          type: "POST",
          headers: {
            "X-CSRF-Token": csrfToken, // Ensure CSRF token is correctly set
          },
          data: {
            name: tripName,
            tripId: tripId || undefined, // Send tripId if updating, otherwise undefined
          },
          success: function(response) {
            if (response.exists) {
              $("#nameError").removeClass("d-none"); // Show error message
            } else {
              $("#nameError").addClass("d-none"); // Hide error message
            }
          },
          error: function() {
            console.error("Error checking trip name.");
          },
        });
      });
    });

    // common method to show error on field
    function showError(input, message) {
      input.classList.add("is-invalid");
      let errorSpan = input.nextElementSibling;
      if (!errorSpan || !errorSpan.classList.contains("invalid-feedback")) {
        errorSpan = document.createElement("div");
        errorSpan.className = "invalid-feedback";
        input.parentNode.appendChild(errorSpan);
      }
      errorSpan.textContent = message;
    }
    // common method to remoe error from the field
    function removeError(input) {
      input.classList.remove("is-invalid");
      let errorSpan = input.nextElementSibling;
      if (errorSpan && errorSpan.classList.contains("invalid-feedback")) {
        errorSpan.remove();
      }
    }

    // Main image preview section : functionality - set image on priview and also add or update the image , remove the image from the source
    document.addEventListener("DOMContentLoaded", function() {
      // Main image preview
      const mainImageInput = document.getElementById("file");
      const mainImagePreview = document.getElementById("mainImagePreview");
      const mainImagePreviewContainer = document.getElementById("mainImagePreviewContainer");
      const removeMainImageButton = document.getElementById("removeMainImage");
      mainImagePreviewContainer.style.display = "block";
      mainImagePreviewContainer.style.maxWidth = "200px"

      // Ensure preview container is hidden initially if no image exists
      if (!mainImagePreview.src || mainImagePreview.src === window.location.href) {
        mainImagePreviewContainer.style.display = "none";
      } else {
        mainImagePreviewContainer.style.display = "block";
      };

      mainImageInput.addEventListener("change", function() {
        const file = this.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(e) {
            mainImagePreview.src = e.target.result;
            mainImagePreview.style.display = "block";
            mainImagePreviewContainer.style.display = "block"; // Ensure it is visible
            removeMainImageButton.style.display = "block"; // Show remove button
          };
          reader.readAsDataURL(file);
        }
      });

      // Clicking the preview image opens the modal
      mainImagePreview.addEventListener("click", function() {
        document.getElementById("fullSizeImage").src = this.src;
      });

      // Banner images preview (multiple)
      const bannerImageInput = document.getElementById("bannerImages");
      const bannerPreviewContainer = document.getElementById("bannerPreviewContainer");

      bannerImageInput.addEventListener("change", function() {
        bannerPreviewContainer.innerHTML = "";
        if (this.files) {
          Array.from(this.files).forEach(file => {
            const reader = new FileReader();
            reader.onload = function(e) {
              const img = document.createElement("img");
              img.src = e.target.result;
              img.classList.add("img-thumbnail");
              img.setAttribute("data-bs-toggle", "modal");
              img.setAttribute("data-bs-target", "#imageModal");
              img.addEventListener("click", function() {
                document.getElementById("fullSizeImage").src = this.src;
              });
              bannerPreviewContainer.appendChild(img);
            };
            reader.readAsDataURL(file);
          });
        }
      });
      // Remove main image
      $("#removeMainImage").click(function() {
        $("#mainImagePreview").attr("src", ""); // Clear src
        $("#mainImagePreviewContainer").hide(); // Hide container
        $("#file").val(""); // Reset file input
      });
    });

    document.addEventListener("DOMContentLoaded", function() {
      const cityContainer = document.getElementById("cityContainer");
      const addCityButton = document.getElementById("addCity");
      let selectedCities = new Set();

      // Fetch cities and populate dropdown
      async function fetchCities() {
        try {
          const response = await fetch("/getCityList");
          const data = await response.json();
          return data.success ? data.cities : [];
        } catch (error) {
          console.error("Error fetching cities:", error);
          return [];
        }
      }

      // Populate city dropdown
      async function populateCityDropdown(selectElement) {
        const cities = await fetchCities();
        selectElement.innerHTML = '<option value="">Select City</option>';
        cities.forEach((city) => {
          const option = document.createElement("option");
          option.value = city.name;
          option.textContent = city.name;
          option.dataset.state = city.state;
          option.dataset.image = city.image;
          selectElement.appendChild(option);
        });
      }

      // Handle city selection (event delegation)
      cityContainer.addEventListener("change", function(event) {
        if (event.target.classList.contains("city-select")) {
          const select = event.target;
          const selectedOption = select.options[select.selectedIndex];
          const cityName = selectedOption.value;
          const cityEntry = select.closest(".city-entry");
          const stateField = cityEntry.querySelector(".state-field");
          const imageField = cityEntry.querySelector(".city-image");

          if (cityName && !selectedCities.has(cityName)) {
            stateField.value = selectedOption.dataset.state;
            imageField.src = selectedOption.dataset.image;
            imageField.style.display = "block";
            selectedCities.add(cityName);
          } else {
            stateField.value = "";
            imageField.src = "";
            imageField.style.display = "none";
            selectedCities.delete(cityName);
          }
        }
      });

      // Handle click event for dynamically generated images
      cityContainer.addEventListener("click", function(event) {
        if (event.target.classList.contains("city-image")) {
          const fullSizeImage = document.getElementById("fullSizeImage");
          const imageModal = new bootstrap.Modal(document.getElementById("imageModal"));

          if (event.target.src) {
            fullSizeImage.src = event.target.src;
            imageModal.show();
          }
        }
      });

      // Function to add a new city section
      let newCityEntry = null;
      async function addCitySection() {
        newCityEntry = document.createElement("div");
        newCityEntry.classList.add("city-entry", "mb-3");
        newCityEntry.innerHTML = `
               <div class="col-md-2">
              <button class="btn btn-danger remove-city mt-4">Remove</button>
              </div>
              <div class="city-entry">
                <div class="row">
                  <div class="col-12 text-end">
                    <button type="button" class="btn btn-danger btn-sm remove-city d-none">
                      <i class="bi bi-x-circle"></i> Remove Section
                    </button>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>City</label>
                      <select class="form-select city-select" required>
                        <option value="">Select City</option>
                      </select>
                    </div>
                  </div>
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>City Image</label>
                      <img src="" class="img-fluid city-image" style="display: none; max-width: 100px;">
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>State</label>
                      <input type="text" class="form-control state-field" placeholder="State" readonly required>
                    </div>
                  </div>
                </div>
                <h5 class="mt-3">Pricing Details</h5>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="basePrice" class="form-label">Base Price (Total trip cost)</label>
                      <input type="number" class="form-control cost-field" id="basePrice" placeholder="Enter base price" required>
                    </div>
                  </div>
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label>Transfer Type</label>
                      <input type="text" class="form-control transferType" name="transferType" placeholder="Transfer Type" required>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="childPrice" class="form-label">Child Price</label>
                      <input type="number" class="form-control" name="childPrice" id="childPrice" placeholder="Enter price per child" required />
                    </div>
                  </div>
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="adultPrice" class="form-label">Adult Price</label>
                      <input type="number" class="form-control adultPrice" id="adultPrice" placeholder="Enter price per adult" required>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <label for="infantPrice" class="form-label">Infant Price</label>
                      <input type="number" class="form-control" name="infantPrice" id="infantPrice" placeholder="Enter price per infant (if applicable)" />
                    </div>
                  </div>
                  <!-- Date Picker Input -->
                  <div class="col-12 col-md-6">
                    <div class="mb-3">
                      <h6 class="mt-3">Available Dates</h5>
                        <div class="input-group">
                          <input type="text" id="datePicker" class="form-control datePicker" placeholder="Select multiple dates">
                          <button class="btn btn-danger clearDates" id="clearDates">Clear</button>
                        </div>
                        <small class="text-danger d-none error-msg" id="error-msg">Please select at least one date.</small>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <!-- Scrollable Table for Selected Dates -->
                  <div class="col-12 col-md-12">
                    <div class="mb-3">
                      <label class="form-label fw-bold"></label>
                      <div class="table-responsive" style="max-height: 250px; overflow-y: auto;">
                        <table class="table table-bordered table-hover align-middle">
                          <thead class="table-light sticky-top">
                            <tr>
                              <th class="text-center" style="width: 10%;">S.No.</th>
                              <th class="text-center" style="width: 60%;">Selected Date</th>
                              <th class="text-center" style="width: 30%;">Action</th>
                            </tr>
                          </thead>
                          <tbody id="datePreview">
                            <!-- Dynamic Rows Will Be Inserted Here -->
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-12 d-flex mb-3">
                    <button type="button" class="btn btn-primary btn-sm addCity" id="addCity">
                      <i class="bi bi-plus-circle"></i> Add City
                    </button>
                  </div>
                </div>
              </div>
    `;

        cityContainer.appendChild(newCityEntry);
        const newSelect = newCityEntry.querySelector(".city-select");
        await populateCityDropdown(newSelect);
        // Reinitialize flatpickr for the new date picker input
        let datePickerInput = newCityEntry.querySelector(".datePicker");
        flatpickr(datePickerInput, {
          mode: "multiple",
          dateFormat: "Y-m-d",
          minDate: "today",
          enableTime: false,
          onClose: function(selectedDatesArr) {
            let selectedDates = selectedDatesArr.map(date => date.toISOString().split("T")[0]);
            updateDatePreview(datePickerInput, selectedDates);
          }
        });
      }

      // Event listener to add a new city section
      addCityButton.addEventListener("click", function() {
        addCitySection();
      });

      // Handle removing a city section
      cityContainer.addEventListener("click", function(event) {
        if (event.target.classList.contains("remove-city")) {
          const cityEntry = event.target.closest(".city-entry");
          if (cityEntry) {
            cityContainer.removeChild(cityEntry);
          }
        }
      });

      // Initialize first dropdown
      populateCityDropdown(document.querySelector(".city-select"));

      let selectedDates = [];
      let datePickerInput = cityContainer.querySelector(".datePicker");
      flatpickr('#datePicker', {
        mode: "multiple",
        dateFormat: "Y-m-d",
        minDate: "today",
        enableTime: false,
        onClose: function(selectedDatesArr) {
          let selectedDates = selectedDatesArr.map(date => date.toISOString().split("T")[0]);
          updateDatePreview(datePickerInput, selectedDates);
        }
      });

      function updateDatePreview(inputElement, selectedDates) {
        let cityEntry = inputElement.closest(".city-entry");
        let datePreviewEl = cityEntry.querySelector("#datePreview");

        datePreviewEl.innerHTML = "";
        selectedDates.forEach((date, index) => {
          let row = `
            <tr>
                <td class="text-center">${index + 1}</td>
                <td class="text-center">${date}</td>
                <td class="text-center">
                    <button class="btn btn-danger btn-sm remove-date" data-date="${date}">Remove</button>
                </td>
            </tr>
        `;
          datePreviewEl.innerHTML += row;
        });

        
      }


      document.querySelectorAll(".remove-btn").forEach(button => {
        button.addEventListener("click", function() {
          let dateToRemove = this.getAttribute("data-date");
          removeDate(dateToRemove);
        });
      });

      function removeDate(date) {
        selectedDates = selectedDates.filter(d => d !== date);
        fp.setDate(selectedDates, true);
        updateDatePreview();
      }

      document.getElementById("clearDates").addEventListener("click", function(e) {
        e.preventDefault();
        selectedDates = [];
        fp.clear();
        updateDatePreview();
      });

      // Convert selectedDates to MongoDB Format
      function formatForMongoDB() {
        let groupedData = {};

        selectedDates.forEach(date => {
          let [year, month, day] = date.split("-");

          let monthName = new Date(date).toLocaleString("en-US", {
            month: "long"
          });

          if (!groupedData[`${year}-${monthName}`]) {
            groupedData[`${year}-${monthName}`] = {
              year: year,
              month: monthName,
              dates: []
            };
          }
          groupedData[`${year}-${monthName}`].dates.push(day);
        });
        let formattedArray = Object.values(groupedData).map(entry => ({
          year: entry.year,
          month: entry.month,
          dates: entry.dates.join(", ")
        }));

        return formattedArray;
      }

    });

    //** Add calender date and other for manage months**
    // function initializeFlatpickr(selector) {
    //   return flatpickr(selector, {
    //     mode: "multiple",
    //     dateFormat: "Y-m-d",
    //     minDate: "today",
    //     enableTime: false,
    //     onClose: function(selectedDatesArr, instance) {
    //       let selectedDates = selectedDatesArr.map(date => date.toISOString().split("T")[0]);
    //       updateDatePreview(selectedDates, instance.element);
    //     }
    //   });
    // };

    // **End  of the calender dateand other for manage monthes**

    //** Mange about section and other section textEditor  **//
    // Store all Quill editors
    const editorsd = {};
    // Define all section editor IDs
    const editorIds = ["about-editor", "placestovisit-editor", "activities-editor", "things_to_carry-editor", "includenexclude-editor", "package_cost-editor", "infonfaq-editor", "guidelines-editor", "bookncancel-editor"];

    // Loop through each section and create a Quill editor
    editorIds.forEach(editorId => {
      editorsd[editorId] = new Quill(`#${editorId}`, {
        theme: "snow",
        modules: {
          toolbar: [
            [{
              'header': [1, 2, 3, 4, 5, 6, false]
            }],
            [{
              'font': []
            }],
            [{
              'size': ['small', false, 'large', 'huge']
            }],
            ['bold', 'italic', 'underline', 'strike'],
            [{
              'script': 'sub'
            }, {
              'script': 'super'
            }],
            [{
              'list': 'ordered'
            }, {
              'list': 'bullet'
            }],
            [{
              'indent': '-1'
            }, {
              'indent': '+1'
            }],
            [{
              'align': []
            }],
            [{
              'color': []
            }, {
              'background': []
            }],
            ['blockquote'],
            ['link'],
            ['clean']
          ],
          imageResize: {
            displayStyles: {
              backgroundColor: 'black',
              border: 'none',
              color: 'white'
            },
            modules: ['Resize', 'DisplaySize', 'Toolbar']
          }
        }
      });
    });
    //** End of all type of textEditor section ** //

    //** New Itinerary day section start from here **/
    // Mange iternity section textEditor section config with image upload
    let dayCount = 1;
    let editors = {};
    Quill.register('modules/imageResize', window.ImageResize.default);
    // Function to initialize Quill editor
    function initializeEditor(editorId) {
      editors[editorId] = new Quill(`#${editorId}`, {
        theme: "snow",
        modules: {
          toolbar: [
            [{
              'header': [1, 2, 3, 4, 5, 6, false]
            }], // All header sizes
            [{
              'font': []
            }], // Font family
            [{
              'size': ['small', false, 'large', 'huge']
            }], // Font size
            ['bold', 'italic', 'underline', 'strike'], // Text formatting
            [{
              'script': 'sub'
            }, {
              'script': 'super'
            }], // Subscript & Superscript
            [{
              'list': 'ordered'
            }, {
              'list': 'bullet'
            }], // Lists
            [{
              'indent': '-1'
            }, {
              'indent': '+1'
            }], // Indentation
            [{
              'align': []
            }], // Text align (left, center, right, justify)
            [{
              'color': []
            }, {
              'background': []
            }], // Text & background color
            ['blockquote'], // Blockquote & Code block
            ['link', 'image', ], // Media tools
            ['clean'] // Clear formatting
          ],
          imageResize: {
            displayStyles: {
              backgroundColor: 'black',
              border: 'none',
              color: 'white'
            },
            modules: ['Resize', 'DisplaySize', 'Toolbar']
          }
        }
      });

      // Sync content with hidden input field
      editors[editorId].on("text-change", function() {
        document.querySelector(`#${editorId}`).nextElementSibling.value = editors[editorId].root.innerHTML;
      });

      // Handle image selection & upload
      editors[editorId].getModule('toolbar').addHandler('image', () => {
        let input = document.createElement('input');
        input.setAttribute('type', 'file');
        input.setAttribute('accept', 'image/*');
        input.click();

        input.onchange = async () => {
          const file = input.files[0];

          if (!file) return;

          // Validate file type
          const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
          if (!allowedTypes.includes(file.type)) {
            alert('Only JPG, JPEG, and PNG images are allowed.');
            return;
          }

          // Validate file size (Max 2MB)
          if (file.size > 2 * 1024 * 1024) {
            alert('File size should not exceed 2MB.');
            return;
          }

          let formData = new FormData();
          formData.append('_csrf', csrfToken);
          const timestamp = new Date().toISOString().replace(/:/g, '-');
          const fileName = `${timestamp}-${file.name}`;
          file.originalname = fileName;
          formData.append('image', file);

          try {
            const response = await fetch('/uploadImage', {
              method: 'POST',
              headers: {
                'X-CSRF-Token': csrfToken
              },
              body: formData
            });

            const result = await response.json();

            if (response.ok && result.success) {
              let range = editors[editorId].getSelection();
              editors[editorId].insertEmbed(range.index, 'image', result.imageUrl);
            } else {
              alert(result.message || 'Failed to upload image.');
            }
          } catch (error) {
            console.error('Upload Error:', error);
            alert('Something went wrong while uploading the image.');
          }
        };
      });
    }
    // Initialize first editor
    initializeEditor("editor-1");

    // Add new itinerary day
    document.getElementById("add-day").addEventListener("click", function() {
      event.preventDefault(); // Prevent page scroll or refresh
      dayCount++;
      let newEditorId = `editor-${dayCount}`;
      let newDay = document.createElement("div");
      newDay.classList.add("itinerary-day", "border", "rounded", "p-3", "mb-3");
      newDay.setAttribute("data-day", dayCount);
      newDay.innerHTML = `
            <h5>Day ${dayCount}</h5>
            <input type="text" class="form-control" name="itinerary-header" id="itinerary-header" placeholder="Enter Header" value="" required="" />
            <div class="editor-container mb-3" id="${newEditorId}"></div>
            <input type="hidden" name="content[]" class="quill-content">
        `;
      document.getElementById("itinerary-container").appendChild(newDay);
      initializeEditor(newEditorId);

      // Enable remove button
      document.getElementById("remove-day").disabled = false;
    });

    // Remove last itinerary day
    document.getElementById("remove-day").addEventListener("click", function() {
      event.preventDefault(); // Prevent page scroll or refresh
      if (dayCount > 1) {
        let lastDay = document.querySelector(`.itinerary-day[data-day="${dayCount}"]`);
        lastDay.remove();
        delete editors[`editor-${dayCount}`]; // Remove editor instance
        dayCount--;
        // Disable remove button if only one editor remains
        if (dayCount === 1) {
          document.getElementById("remove-day").disabled = true;
        }
      }
    });

    //** Itinerary day section end here **/

    //*** Submit form section logic **/
    document.getElementById('addUpdateTripDetial').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const response = await fetch(e.target.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': csrfToken
        }
      });
      // Collect basic trip details
      // formData.append("name", $("#name").val());
      // formData.append("state", $("#state").val());
      // formData.append("destinations", $("#destinations").val());
      // formData.append("route", $("#route").val());
      // formData.append("days", $("#days").val());
      // formData.append("tag", $("#tag").val());
      // formData.append("price", $("#price").val());
      // formData.append("tripType", $("#tripType").val());
      // formData.append("altitude", $("#altitude").val());
      // formData.append("bestSession", $("#bestSession").val());
      // formData.append("placestovisit", $("#placestovisit").val());
      // formData.append("activities", $("#activities").val());
      // formData.append("includenexclude", $("#includenexclude").val());
      // formData.append("package_cost", $("#package_cost").val());
      // formData.append("Bookncancel", $("#Bookncancel").val());
      // formData.append("guidelines", $("#guidelines").val());
      // formData.append("infonfaq", $("#infonfaq").val());

      // // Handle image uploads
      // let mainImage = $("#file")[0].files[0];
      // if (mainImage) {
      //   formData.append("image", mainImage);
      // }

      // let bannerImages = $("#bannerImages")[0].files;
      // let bannerImageArr = [];
      // for (let i = 0; i < bannerImages.length; i++) {
      //   formData.append("bannerImages", bannerImages[i]);
      // }

      // Collect departure city data
      // let depCityData = [];
      // let datesArray = [];

      // $(".city-entry").each(function() {
      //   let state = $(this).find(".state-field").val();
      //   let city = $(this).find(".city-select").val();
      //   let perPersonCost = $(this).find(".cost-field").val();

      //   $(this).find(".month-entry").each(function() {
      //     let month = $(this).find(".month-select").val();
      //     let dates = $(this).find(".date-select").val();

      //     if (month && dates) {
      //       datesArray.push({
      //         Month: month,
      //         dates: dates
      //       });
      //     }
      //   });

      //   if (state && city && perPersonCost) {
      //     depCityData.push({
      //       State: state,
      //       City: city,
      //       PerPersonCost: parseInt(perPersonCost),
      //       dates: datesArray
      //     });
      //   }
      // });

      // formData.append("deptcities", JSON.stringify(depCityData));
      // // Append trip_dates separately
      // formData.append("trip_dates", JSON.stringify(datesArray));

      // // Collect itinerary data
      // let itineraryData = [];
      // $(".itinerary-day").each(function() {
      //   let day = "Day " + $(this).attr("data-day");
      //   // ✅ Select input field by name (since ID is repeated)
      //   let itinerarydayHeader = $(this).find("input[name='itinerary-header']").val() || "";

      //   // ✅ Get editor ID and fetch Quill content safely
      //   let editorId = $(this).find(".editor-container").attr("id");
      //   let description = editorId && editors[editorId] ? editors[editorId].root.innerHTML : "";

      //   itineraryData.push({
      //     day: day,
      //     header: itinerarydayHeader,
      //     description: description,
      //   });
      // });

      // formData.append("itinerary", JSON.stringify(itineraryData));
      // formData.append("about", $("#about").val());
      // formData.append("inclusions", $("#inclusions").val());
      // formData.append("exclusions", $("#exclusions").val());
      // formData.append("shortItinerary", $("#shortItinerary").val());
      // formData.append("things_to_carry", $("#things_to_carry").val());
      // formData.append("termsConditions", $("#termsConditions").val());
      // formData.append("faq", $("#faq").val());

      // AJAX call to API
      // $.ajax({
      //   url: "/admin/postNewAddTours", // Change to your backend API URL
      //   type: "POST",
      //   headers: {
      //     'X-CSRF-Token': csrfToken
      //   },
      //   data: formData,
      //   processData: false,
      //   contentType: false,
      //   success: function(response) {
      //     alert("Trip successfully added!");
      //     console.log(response);
      //   },
      //   error: function(error) {
      //     console.error("Error:", error);
      //     alert("Something went wrong!");
      //   }
      // });
    });
  </script>
</body>

</html>
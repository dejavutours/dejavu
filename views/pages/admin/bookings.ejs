<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../../partials/headtag'); %>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Trip Bookings Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@5/dark.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
  <style>
    :root {
      --primary-color: #1E3A8A;
      --secondary-color: #F97316;
      --text-color: #1F2937;
      --bg-color: #F3F4F6;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
    }

    .dashboard-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 1.5rem;
    }

    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .dashboard-header h1 {
      font-size: 1.875rem;
      font-weight: 700;
      color: var(--primary-color);
    }

    .stats-grid, .charts-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .stat-card, .chart-card {
      background: white;
      border-radius: 0.75rem;
      padding: 1.5rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .stat-card:hover, .chart-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .stat-card h3, .chart-card h3 {
      font-size: 1rem;
      color: #6B7280;
      margin-bottom: 0.5rem;
    }

    .stat-card p {
      font-size: 1.75rem;
      font-weight: 600;
      color: var(--primary-color);
    }

    .filter-panel {
      background: white;
      border-radius: 0.75rem;
      padding: 1.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .filter-panel.collapsed .filter-content {
      display: none;
    }

    .filter-panel .form-control, .filter-panel .form-select {
      border-radius: 0.375rem;
      border: 1px solid #D1D5DB;
      padding: 0.5rem;
      font-size: 0.875rem;
    }

    .filter-panel .btn {
      border-radius: 0.375rem;
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    }

    .bookings-table {
      background: white;
      border-radius: 0.75rem;
      overflow: hidden;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .bookings-table th {
      background: var(--primary-color);
      color: white;
      font-weight: 600;
      padding: 0.75rem;
      text-align: left;
      font-size: 0.875rem;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .bookings-table th.sortable {
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .bookings-table th.sortable:hover {
      background: #1E40AF;
    }

    .bookings-table td {
      padding: 0.75rem;
      font-size: 0.875rem;
      border-bottom: 1px solid #E5E7EB;
    }

    .badge {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 1rem;
    }

    .action-btn {
      font-size: 0.75rem;
      padding: 0.25rem 0.75rem;
      border-radius: 0.375rem;
      transition: background-color 0.2s;
    }

    .error-toast {
      display: none;
      position: fixed;
      top: 1rem;
      right: 1rem;
      background: #FEE2E2;
      color: #B91C1C;
      padding: 1rem;
      border-radius: 0.375rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 1000;
    }

    .pagination {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin-top: 1.5rem;
    }

    .pagination button {
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      border: 1px solid #D1D5DB;
      background: white;
      font-size: 0.875rem;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .pagination button:hover {
      background: #F3F4F6;
    }

    .pagination button.active {
      background: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }

    .search-bar {
      max-width: 300px;
    }

    .bulk-actions {
      margin-bottom: 1rem;
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .select-all {
      cursor: pointer;
    }

    .no-results {
      text-align: center;
      padding: 2rem;
      color: #6B7280;
    }

    .chart-container {
      position: relative;
      height: 200px;
    }

    @media (max-width: 768px) {
      .stats-grid, .charts-grid {
        grid-template-columns: 1fr;
      }

      .filter-panel .row {
        flex-direction: column;
      }

      .filter-panel .col-md-3 {
        margin-bottom: 1rem;
      }

      .dashboard-header {
        flex-direction: column;
        align-items: flex-start;
      }

      .search-bar {
        max-width: 100%;
      }

      .bookings-table {
        font-size: 0.75rem;
      }

      .bookings-table th, .bookings-table td {
        padding: 0.5rem;
      }

      .action-btn {
        font-size: 0.7rem;
        padding: 0.2rem 0.5rem;
      }

      .chart-container {
        height: 150px;
      }
    }

    @media (max-width: 576px) {
      .dashboard-container {
        padding: 1rem;
      }

      .bookings-table {
        display: block;
        overflow-x: auto;
      }

      .bookings-table thead, .bookings-table tbody, .bookings-table tr {
        display: block;
      }

      .bookings-table th, .bookings-table td {
        display: block;
        text-align: left;
        width: 100%;
        box-sizing: border-box;
      }

      .bookings-table th {
        position: relative;
      }
    }
    .nice-select.open .list {
        width: 100%;
      }
  </style>
</head>
<body>
  <%- include('../../partials/header'); %>
  <div class="dashboard-container">
    <!-- Header -->
    <div class="dashboard-header">
      <h1>Trip Bookings Dashboard (Work in progress)</h1>
      <div class="d-flex gap-2">
        <input type="text" id="searchInput" class="form-control search-bar" placeholder="Search by Trip or User" aria-label="Search bookings">
        <button id="exportCsv" class="btn btn-outline-secondary action-btn"><i class="bi bi-download"></i> Export CSV</button>
      </div>
    </div>

    <!-- Error Toast -->
    <div id="errorToast" class="error-toast"></div>

    <!-- Analytics Section -->
    <div class="filter-panel chart-panel" id="chartPanel">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="m-0 text-sm font-semibold">Analytics</h3>
        <button id="toggleCharts" class="btn btn-link p-0"><i class="bi bi-chevron-down"></i></button>
      </div>
      <div class="charts-content">
        <div class="charts-grid">
          <div class="chart-card">
            <h3>Bookings by Status</h3>
            <div class="chart-container">
              <canvas id="statusChart"></canvas>
            </div>
          </div>
          <div class="chart-card">
            <h3>Revenue Trend (Last 30 Days)</h3>
            <div class="chart-container">
              <canvas id="revenueChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Statistics -->
    <div class="stats-grid">
      <div class="stat-card" data-tippy-content="Number of bookings created today">
        <h3>Bookings Today</h3>
        <p><%= stats.bookingsToday %></p>
      </div>
      <div class="stat-card" data-tippy-content="Bookings created this week">
        <h3>Bookings This Week</h3>
        <p><%= stats.bookingsThisWeek %></p>
      </div>
      <div class="stat-card" data-tippy-content="Bookings created this month">
        <h3>Bookings This Month</h3>
        <p><%= stats.bookingsThisMonth %></p>
      </div>
      <div class="stat-card" data-tippy-content="Total revenue from paid bookings this month">
        <h3>Total Revenue (Month)</h3>
        <p>â‚¹<%= stats.totalAmountThisMonth.toLocaleString('en-IN') %></p>
      </div>
    </div>

    <!-- Filter Panel -->
    <div class="filter-panel" id="filterPanel">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="m-0 text-sm font-semibold">Filters</h3>
        <button id="toggleFilters" class="btn btn-link p-0"><i class="bi bi-chevron-down"></i></button>
      </div>
      <div class="filter-content">
        <form id="filterForm" class="row g-3">
          <div class="col-md-3">
            <label for="bookingStatus" class="form-label text-sm">Booking Status</label>
            <select id="bookingStatus" name="bookingStatus" class="form-select">
              <option value="">All</option>
              <option value="Pending" <%= filters.bookingStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
              <option value="Confirmed" <%= filters.bookingStatus === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
              <option value="Cancelled" <%= filters.bookingStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
            </select>
          </div>
          <div class="col-md-3">
            <label for="paymentStatus" class="form-label text-sm">Payment Status</label>
            <select id="paymentStatus" name="paymentStatus" class="form-select">
              <option value="">All</option>
              <option value="Pending" <%= filters.paymentStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
              <option value="Partial" <%= filters.paymentStatus === 'Partial' ? 'selected' : '' %>>Partial</option>
              <option value="Paid" <%= filters.paymentStatus === 'Paid' ? 'selected' : '' %>>Paid</option>
              <option value="Failed" <%= filters.paymentStatus === 'Failed' ? 'selected' : '' %>>Failed</option>
            </select>
          </div>
          <div class="col-md-3">
            <label for="tripStartDate" class="form-label text-sm">Trip Start Date</label>
            <input type="date" id="tripStartDate" name="tripStartDate" class="form-control" value="<%= filters.tripStartDate %>">
          </div>
          <div class="col-md-3">
            <label for="tripName" class="form-label text-sm">Trip Name</label>
            <input type="text" id="tripName" name="tripName" class="form-control" placeholder="Enter trip name" value="<%= filters.tripName %>">
          </div>
          <div class="col-md-3 d-flex align-items-end gap-2">
            <button type="submit" class="btn btn-primary">Apply Filters</button>
            <button type="button" id="resetFilters" class="btn btn-outline-secondary">Reset</button>
          </div>
        </form>
        <div class="mt-3">
          <button class="btn btn-outline-primary btn-sm quick-filter" data-filter="pending">Pending Only</button>
          <button class="btn btn-outline-primary btn-sm quick-filter" data-filter="today">Today's Bookings</button>
        </div>
      </div>
    </div>

    <!-- Per-Trip Statistics -->
    <div class="stats-grid mb-4">
      <% stats.perTripStats.forEach(trip => { %>
        <div class="stat-card" data-tippy-content="Details for <%= trip.tripName %>">
          <h3><%= trip.tripName %></h3>
          <p><%= trip.bookings %> Bookings, â‚¹<%= trip.totalAmount.toLocaleString('en-IN') %></p>
        </div>
      <% }) %>
    </div>

    <!-- Bulk Actions -->
    <div class="bulk-actions">
      <label class="select-all">
        <input type="checkbox" id="selectAll"> Select All
      </label>
      <select id="bulkAction" class="form-select w-auto" disabled>
        <option value="">Bulk Actions</option>
        <option value="Confirmed">Confirm Selected</option>
        <option value="Cancelled">Cancel Selected</option>
      </select>
      <button id="applyBulkAction" class="btn btn-primary action-btn" disabled>Apply</button>
    </div>

    <!-- Bookings Table -->
    <div class="bookings-table">
      <table class="w-full">
        <thead>
          <tr>
            <th><input type="checkbox" id="selectAllHeader"></th>
            <th class="sortable" data-sort="bookingNumber">Booking #</th>
            <th class="sortable" data-sort="user">User</th>
            <th class="sortable" data-sort="tripName">Trip Name</th>
            <th>Persons</th>
            <th class="sortable" data-sort="totalTripCost">Total Cost</th>
            <th>Paid</th>
            <th class="sortable" data-sort="bookingStatus">Booking Status</th>
            <th>Payment Status</th>
            <th>Trip Dates</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="bookingsTable">
          <% bookings.forEach(booking => { %>
            <tr data-tippy-content="Created: <%= new Date(booking.createdAt).toLocaleString() %>" data-booking-id="<%= booking._id %>">
              <td><input type="checkbox" class="booking-select" data-id="<%= booking._id %>"></td>
              <td><%= booking.bookingNumber %></td>
              <td>
                <%= booking.userDetails ? `${booking.userDetails.details.firstName} ${booking.userDetails.details.lastName}` : 'Unknown' %>
                <br>
                <small class="text-gray-500"><%= booking.userDetails?.details.email || 'N/A' %></small>
              </td>
              <td><%= booking.tourDetails?.name || booking.tripName %></td>
              <td>
                A: <%= booking.totalPerson.adult %>
                C: <%= booking.totalPerson.child %>
              </td>
              <td>â‚¹<%= booking.totalTripCost.toLocaleString('en-IN') %></td>
              <td>â‚¹<%= booking.paidAmount.toLocaleString('en-IN') %></td>
              <td>
                <span class="badge 
                  <%= booking.bookingStatus === 'Confirmed' ? 'bg-success' : 
                      booking.bookingStatus === 'Pending' ? 'bg-warning text-dark' : 'bg-danger' %>">
                  <%= booking.bookingStatus %>
                </span>
              </td>
              <td>
                <span class="badge 
                  <%= booking.paymentStatus === 'Paid' ? 'bg-success' : 
                      booking.paymentStatus === 'Partial' ? 'bg-info text-dark' : 
                      booking.paymentStatus === 'Pending' ? 'bg-warning text-dark' : 'bg-danger' %>">
                  <%= booking.paymentStatus %>
                </span>
              </td>
              <td>
                <%= new Date(booking.tripStartDate).toLocaleDateString('en-GB') %> - 
                <%= new Date(booking.tripEndDate).toLocaleDateString('en-GB') %>
              </td>
              <td>
                <a href="/admin/bookings/<%= booking._id %>" class="btn btn-sm btn-primary action-btn" aria-label="View details"><i class="bi bi-eye"></i></a>
                <button class="btn btn-sm btn-warning action-btn update-status" 
                        data-id="<%= booking._id %>" 
                        data-status="Confirmed"
                        aria-label="Confirm booking"><i class="bi bi-check-circle"></i></button>
                <button class="btn btn-sm btn-danger action-btn update-status" 
                        data-id="<%= booking._id %>" 
                        data-status="Cancelled"
                        aria-label="Cancel booking"><i class="bi bi-x-circle"></i></button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
      <div id="noResults" class="no-results" style="display: none;">No bookings match your search.</div>
    </div>

    <!-- Pagination -->
    <div class="pagination">
      <% for(let i = 1; i <= Math.ceil(totalBookings / 10); i++) { %>
        <button class="page-btn <%= currentPage === i ? 'active' : '' %>" data-page="<%= i %>"><%= i %></button>
      <% } %>
    </div>
  </div>
  <%- include('../../partials/footer'); %>
  <%- include('../../partials/scripttag'); %>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/tippy.js@6.3.7/dist/tippy-bundle.umd.min.js"></script>
  <script>
    // Error Toast
    const showError = (message) => {
      const toast = document.getElementById('errorToast');
      toast.textContent = message;
      toast.style.display = 'block';
      setTimeout(() => toast.style.display = 'none', 5000);
    };

    // Filter Form Submission
    document.getElementById('filterForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const params = new URLSearchParams(formData).toString();
      window.location.href = `/admin/bookings?${params}`;
    });

    // Reset Filters
    document.getElementById('resetFilters').addEventListener('click', () => {
      window.location.href = '/admin/bookings';
    });

    // Quick Filters
    document.querySelectorAll('.quick-filter').forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.dataset.filter;
        const params = new URLSearchParams();
        if (filter === 'pending') {
          params.set('bookingStatus', 'Pending');
        } else if (filter === 'today') {
          const today = new Date().toISOString().split('T')[0];
          params.set('tripStartDate', today);
        }
        window.location.href = `/admin/bookings?${params.toString()}`;
      });
    });

    // Toggle Filter Panel
    document.getElementById('toggleFilters').addEventListener('click', () => {
      const panel = document.getElementById('filterPanel');
      const content = panel.querySelector('.filter-content');
      panel.classList.toggle('collapsed');
      content.style.display = panel.classList.contains('collapsed') ? 'none' : 'block';
    });

    // Toggle Chart Panel
    document.getElementById('toggleCharts').addEventListener('click', () => {
      const panel = document.getElementById('chartPanel');
      const content = panel.querySelector('.charts-content');
      panel.classList.toggle('collapsed');
      content.style.display = panel.classList.contains('collapsed') ? 'none' : 'block';
    });

    // Status Update with SweetAlert2
    document.querySelectorAll('.update-status').forEach(button => {
      button.addEventListener('click', async () => {
        const bookingId = button.dataset.id;
        const status = button.dataset.status;
        const result = await Swal.fire({
          title: `Confirm ${status} Booking`,
          text: `Are you sure you want to ${status.toLowerCase()} this booking?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#1E3A8A',
          cancelButtonColor: '#EF4444',
          confirmButtonText: 'Yes, proceed'
        });

        if (result.isConfirmed) {
          try {
            button.disabled = true;
            button.innerHTML = '<i class="bi bi-hourglass-split"></i>';
            const response = await fetch(`/admin/bookings/${bookingId}/status`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': '<%= csrfToken %>'
              },
              body: JSON.stringify({ bookingStatus: status })
            });
            if (response.ok) {
              Swal.fire('Success', 'Booking status updated', 'success').then(() => {
                window.location.reload();
              });
            } else {
              const error = await response.json();
              showError(error.message || 'Failed to update status');
            }
          } catch (err) {
            showError('Network error while updating status');
          } finally {
            button.disabled = false;
            button.innerHTML = `<i class="bi bi-${status === 'Confirmed' ? 'check-circle' : 'x-circle'}"></i>`;
          }
        }
      });
    });

    // Client-Side Search
    let searchTimeout;
    const originalRows = Array.from(document.querySelectorAll('#bookingsTable tr'));
    document.getElementById('searchInput').addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        const query = document.getElementById('searchInput').value.toLowerCase();
        const tbody = document.getElementById('bookingsTable');
        tbody.innerHTML = '';
        const noResults = document.getElementById('noResults');
        let hasResults = false;

        originalRows.forEach(row => {
          const tripName = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
          const userName = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
          if (!query || tripName.includes(query) || userName.includes(query)) {
            tbody.appendChild(row);
            hasResults = true;
          }
        });

        noResults.style.display = hasResults ? 'none' : 'block';
      }, 300);
    });

    // Bulk Actions
    const selectAll = document.getElementById('selectAll');
    const selectAllHeader = document.getElementById('selectAllHeader');
    const bookingSelects = document.querySelectorAll('.booking-select');
    const bulkAction = document.getElementById('bulkAction');
    const applyBulkAction = document.getElementById('applyBulkAction');

    function updateBulkActionState() {
      const selectedCount = document.querySelectorAll('.booking-select:checked').length;
      bulkAction.disabled = selectedCount === 0;
      applyBulkAction.disabled = selectedCount === 0;
    }

    selectAll.addEventListener('change', () => {
      bookingSelects.forEach(checkbox => {
        checkbox.checked = selectAll.checked;
      });
      selectAllHeader.checked = selectAll.checked;
      updateBulkActionState();
    });

    selectAllHeader.addEventListener('change', () => {
      bookingSelects.forEach(checkbox => {
        checkbox.checked = selectAllHeader.checked;
      });
      selectAll.checked = selectAllHeader.checked;
      updateBulkActionState();
    });

    bookingSelects.forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        selectAll.checked = document.querySelectorAll('.booking-select:checked').length === bookingSelects.length;
        selectAllHeader.checked = selectAll.checked;
        updateBulkActionState();
      });
    });

    applyBulkAction.addEventListener('click', async () => {
      const selectedIds = Array.from(document.querySelectorAll('.booking-select:checked')).map(cb => cb.dataset.id);
      const status = bulkAction.value;
      if (!status) {
        showError('Please select an action');
        return;
      }

      const result = await Swal.fire({
        title: `Confirm Bulk ${status}`,
        text: `Are you sure you want to ${status.toLowerCase()} ${selectedIds.length} booking(s)?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#1E3A8A',
        cancelButtonColor: '#EF4444',
        confirmButtonText: 'Yes, proceed'
      });

      if (result.isConfirmed) {
        try {
          applyBulkAction.disabled = true;
          applyBulkAction.innerHTML = '<i class="bi bi-hourglass-split"></i> Applying...';
          const response = await fetch('/admin/bookings/bulk-status', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'CSRF-Token': '<%= csrfToken %>'
            },
            body: JSON.stringify({ bookingIds: selectedIds, bookingStatus: status })
          });
          if (response.ok) {
            Swal.fire('Success', await response.json().then(data => data.message), 'success').then(() => {
              window.location.reload();
            });
          } else {
            const error = await response.json();
            showError(error.message || 'Failed to update bookings');
          }
        } catch (err) {
          showError('Network error while updating bookings');
        } finally {
          applyBulkAction.disabled = false;
          applyBulkAction.innerHTML = 'Apply';
        }
      }
    });

    // Table Sorting
    let sortDirection = {};
    document.querySelectorAll('.sortable').forEach(header => {
      header.addEventListener('click', () => {
        const sortBy = header.dataset.sort;
        sortDirection[sortBy] = !sortDirection[sortBy];
        sortTable(sortBy, sortDirection[sortBy]);
      });
    });

    function sortTable(sortBy, ascending) {
      const tbody = document.getElementById('bookingsTable');
      const rows = Array.from(tbody.querySelectorAll('tr'));
      rows.sort((a, b) => {
        let aValue = a.querySelector(`td:nth-child(${getColumnIndex(sortBy)})`).textContent.trim();
        let bValue = b.querySelector(`td:nth-child(${getColumnIndex(sortBy)})`).textContent.trim();
        if (sortBy === 'totalTripCost' || sortBy === 'paidAmount') {
          aValue = parseFloat(aValue.replace(/â‚¹|,/g, ''));
          bValue = parseFloat(bValue.replace(/â‚¹|,/g, ''));
        } else if (sortBy === 'bookingStatus' || sortBy === 'paymentStatus') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }
        if (!isNaN(aValue) && !isNaN(bValue)) {
          return ascending ? aValue - bValue : bValue - aValue;
        }
        return ascending ? aValue.localeCompare(bValue) : bValue.localeCompare(bValue);
      });
      tbody.innerHTML = '';
      rows.forEach(row => tbody.appendChild(row));
    }

    function getColumnIndex(sortBy) {
      const headers = ['select', 'bookingNumber', 'user', 'tripName', 'persons', 'totalTripCost', 'paidAmount', 'bookingStatus', 'paymentStatus', 'tripDates', 'actions'];
      return headers.indexOf(sortBy) + 1;
    }

    // CSV Export
    document.getElementById('exportCsv').addEventListener('click', () => {
      const headers = ['Booking Number', 'User', 'Trip Name', 'Adults', 'Children', 'Total Cost', 'Paid Amount', 'Booking Status', 'Payment Status', 'Trip Start', 'Trip End'];
      const rows = <%- JSON.stringify(bookings.map(b => [
        b.bookingNumber,
        b.userDetails ? `${b.userDetails.details.firstName} ${b.userDetails.details.lastName}` : 'Unknown',
        b.tourDetails?.name || b.tripName,
        b.totalPerson.adult,
        b.totalPerson.child,
        b.totalTripCost,
        b.paidAmount,
        b.bookingStatus,
        b.paymentStatus,
        new Date(b.tripStartDate).toLocaleDateString('en-GB'),
        new Date(b.tripEndDate).toLocaleDateString('en-GB')
      ])) %>;
      const csv = [headers, ...rows].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
      const blob = new Blob([csv], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'bookings.csv';
      a.click();
      URL.revokeObjectURL(url);
    });

    // Pagination
    document.querySelectorAll('.page-btn').forEach(button => {
      button.addEventListener('click', () => {
        const page = button.dataset.page;
        const params = new URLSearchParams(window.location.search);
        params.set('page', page);
        window.location.href = `/admin/bookings?${params.toString()}`;
      });
    });

    // Initialize Charts
    const statusChart = new Chart(document.getElementById('statusChart'), {
      type: 'pie',
      data: {
        labels: <%- JSON.stringify(stats.chartData.statusCounts.map(sc => sc.status)) %>,
        datasets: [{
          data: <%- JSON.stringify(stats.chartData.statusCounts.map(sc => sc.count)) %>,
          backgroundColor: ['#F97316', '#22C55E', '#EF4444'],
          borderColor: '#fff',
          borderWidth: 2
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { position: 'bottom' },
          tooltip: { backgroundColor: '#1E3A8A' }
        }
      }
    });

    const revenueChart = new Chart(document.getElementById('revenueChart'), {
      type: 'line',
      data: {
        labels: <%- JSON.stringify(stats.chartData.revenueTrend.map(rt => rt.date)) %>,
        datasets: [{
          label: 'Revenue (â‚¹)',
          data: <%- JSON.stringify(stats.chartData.revenueTrend.map(rt => rt.total)) %>,
          borderColor: '#1E3A8A',
          backgroundColor: 'rgba(30, 58, 138, 0.2)',
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: { beginAtZero: true, title: { display: true, text: 'Revenue (â‚¹)' } },
          x: { title: { display: true, text: 'Date' } }
        },
        plugins: {
          legend: { display: false },
          tooltip: { backgroundColor: '#1E3A8A' }
        }
      }
    });

    // Initialize Tooltips
    tippy('[data-tippy-content]', {
      placement: 'top',
      theme: 'light-border',
      animation: 'scale'
    });

    // Ensure panels are visible on load
    document.querySelector('.filter-content').style.display = 'block';
    document.querySelector('.charts-content').style.display = 'block';
  </script>
</body>
</html>
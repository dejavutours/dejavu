<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard - Category Management</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <style>
    /* Scoped styles for Category Management with cm- prefix */
    .cm-container {
      max-width: 1280px;
      margin: 0 auto;
      padding: 1.5rem 1rem;
      font-family: "Inter", sans-serif;
      background: linear-gradient(to bottom, #f9fafb, #e5e7eb);
    }

    .cm-tabs {
      display: flex;
      border-bottom: 2px solid #d1d5db;
      margin-bottom: 1rem;
    }

    .cm-tab {
      padding: 0.5rem 1rem;
      color: #4b5563;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .cm-tab:hover {
      color: #1d4ed8;
    }

    .cm-tab.active {
      border-bottom: 3px solid #1d4ed8;
      color: #1d4ed8;
    }

    .cm-form-container {
      background: #ffffff;
      border-radius: 0.75rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      margin-bottom: 1.5rem;
      transition: all 0.3s ease;
      overflow: hidden;
    }

    .cm-form-container.collapsed {
      height: 2.5rem;
    }

    .cm-form-toggle {
      cursor: pointer;
      padding: 0.5rem 1rem;
      background: linear-gradient(to right, #1d4ed8, #3b82f6);
      color: white;
      font-weight: 600;
      border-radius: 0.75rem 0.75rem 0 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .cm-form {
      padding: 1rem;
    }

    .cm-card {
      background: #ffffff;
      border-radius: 0.75rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
      padding: 0.75rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      cursor: move;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      position: relative;
    }

    .cm-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.12);
    }

    .cm-card img {
      width: 120px;
      height: 120px;
      object-fit: cover;
      border-radius: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .cm-card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 1rem;
      max-height: 65vh;
      overflow-y: auto;
      padding: 0.75rem;
      background: #f3f4f6;
      border-radius: 0.75rem;
    }

    .cm-actions {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      opacity: 0;
      transition: opacity 0.2s ease;
      display: flex;
      gap: 0.25rem;
    }

    .cm-card:hover .cm-actions {
      opacity: 1;
    }

    .cm-action-btn {
      padding: 0.5rem 0.75rem;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 0.375rem;
      transition: all 0.2s ease;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .cm-action-btn.edit {
      background: linear-gradient(to right, #f59e0b, #d97706);
      color: white;
    }

    .cm-action-btn.edit:hover {
      background: linear-gradient(to right, #d97706, #b45309);
    }

    .cm-action-btn.delete {
      background: linear-gradient(to right, #ef4444, #dc2626);
      color: white;
    }

    .cm-action-btn.delete:hover {
      background: linear-gradient(to right, #dc2626, #b91c1c);
    }

    .select2-container--default .select2-selection--single {
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      padding: 0.25rem;
      background: #ffffff;
      height: 2.25rem;
    }

    .cm-toast {
      z-index: 10000 !important;
    }

    .cm-filter-bar {
      display: flex;
      gap: 0.75rem;
      margin-bottom: 1rem;
      align-items: center;
      flex-wrap: nowrap;
    }

    .cm-filter-bar .filter-item {
      flex: 1;
      min-width: 150px;
      max-width: 250px;
    }

    .cm-loading {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.6);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    .cm-loading-spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #1d4ed8;
      border-radius: 50%;
      width: 36px;
      height: 36px;
      animation: cm-spin 1s linear infinite;
    }

    .cm-crop-modal .modal-content {
      border-radius: 0.75rem;
      overflow: hidden;
    }

    .cm-crop-modal select#cmCropRatio {
      width: 100%;
      max-width: 200px;
      margin: 0 auto;
      display: block;
    }

    .cm-crop-image {
      max-width: 100%;
      max-height: 50vh;
    }

    .cm-order-input.error {
      border-color: #ef4444;
      background-color: #fee2e2;
    }

    .cm-no-records {
      text-align: center;
      padding: 2rem;
      color: #6b7280;
      font-size: 1rem;
      font-weight: 500;
    }

    @keyframes cm-spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive adjustments */
    @media (max-width: 640px) {
      .cm-card-grid {
        grid-template-columns: 1fr;
      }

      .cm-form .grid {
        grid-template-columns: 1fr;
      }

      .cm-tabs {
        flex-wrap: wrap;
      }

      .cm-tab {
        flex: 1 1 auto;
        text-align: center;
      }

      .cm-filter-bar {
        flex-direction: column;
        align-items: stretch;
      }
    }

    /* Animations */
    @keyframes cm-fadeIn {
      from {
        opacity: 0;
        transform: translateY(8px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
  <%- include('../../partials/headtag'); %>
</head>

<body class="bg-gray-100">
  <%- include('../../partials/header'); %>
  <div class="cm-container">
    <!-- Loading Overlay -->
    <div class="cm-loading" id="cmLoadingOverlay">
      <div class="cm-loading-spinner"></div>
    </div>

    <!-- Tab Navigation -->
    <div class="cm-tabs">
      <div class="cm-tab" data-tab="cities" data-redirect="/cities">City Master</div>
      <div class="cm-tab" data-tab="states" data-redirect="/states">State Master</div>
      <div class="cm-tab active" data-tab="category" data-redirect="/categories">Category Master</div>
      <div class="cm-tab" data-tab="banners" data-redirect="/banner">Banner Master</div>
      <div class="cm-tab" data-tab="trips" data-redirect="/trips">Trip Master</div>
    </div>

    <!-- Category Management Tab Content -->
    <div id="category-tab" class="cm-tab-content">
      <!-- Add/Update Form -->
      <div class="cm-form-container collapsed" id="cmCategoryFormContainer">
        <div class="cm-form-toggle" id="cmFormToggle">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Show Form
        </div>
        <form id="cmCategoryForm" action="/categories" method="POST" enctype="multipart/form-data" class="cm-form space-y-4">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <input type="hidden" id="cmCategoryId" name="id" />
          <input type="hidden" id="cmOldImage" name="oldImage" />

          <div class="space-y-2">
            <div>
              <label for="cmCategoryName" class="block text-sm font-semibold text-gray-700">Category Name</label>
              <input type="text" id="cmCategoryName" name="name" class="w-full border border-gray-300 rounded-md p-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required />
            </div>
            <div>
              <label for="cmImage" class="block text-sm font-semibold text-gray-700">Category Image</label>
              <div class="flex items-center space-x-3">
                <input type="file" class="flex-1 border border-gray-300 rounded-md p-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" id="cmImage" name="image" accept="image/*" />
                <img id="cmImagePreview" src="" alt="Preview" class="w-16 h-16 object-cover rounded-md border border-gray-200 cursor-pointer" onclick="$('#cmPreviewModalImg').attr('src', this.src); $('#cmPreviewModal').modal('show');" />
              </div>
            </div>
            <div>
              <label for="cmIsActive" class="block text-sm font-semibold text-gray-700">Active Status</label>
              <label class="inline-flex items-center">
                <input type="checkbox" id="cmIsActive" name="isActive" checked class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                <span class="ml-2 text-sm text-gray-600">Active</span>
              </label>
            </div>
          </div>

          <div class="flex justify-end space-x-2">
            <button type="button" id="cmCancelBtn" class="px-3 py-1.5 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 text-sm font-medium hidden">
              Cancel
            </button>
            <button type="submit" id="cmSubmitBtn" class="px-4 py-1.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-md hover:from-blue-700 hover:to-blue-800 text-sm font-medium">
              Add Category
            </button>
          </div>
        </form>
      </div>

      <!-- Filter and Search Bar -->
      <div class="cm-filter-bar">
        <div class="filter-item">
          <div class="relative">
            <input type="text" id="cmSearchInput" class="w-full border border-gray-300 rounded-md pl-8 pr-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Search categories..." />
            <svg class="absolute left-2.5 top-2 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
        <div class="filter-item">
          <select class="select2 w-full" id="cmActiveFilter">
            <option value="">All Statuses</option>
            <option value="true">Active</option>
            <option value="false">Inactive</option>
          </select>
        </div>
        <button id="cmClearFiltersBtn" class="px-3 py-1.5 bg-gray-600 text-white rounded-md hover:bg-gray-700 text-sm font-medium">
          Clear Filters
        </button>
        <button id="cmBulkDeleteBtn" class="px-3 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm font-medium hidden">
          Delete Selected
        </button>
      </div>

      <!-- Category Cards -->
      <div class="cm-card-grid" id="cmCategoryGrid"></div>
      <div class="flex justify-end mt-3">
        <button id="cmSaveOrderBtn" class="px-4 py-1.5 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-md hover:from-green-700 hover:to-green-800 text-sm font-medium hidden">
          Save Order
        </button>
      </div>
    </div>

    <!-- Placeholder Tab Contents -->
    <div id="cities-tab" class="cm-tab-content hidden">
      <h2 class="text-2xl font-bold text-gray-800 mb-6">City Management</h2>
      <p class="text-gray-600">
        City management functionality coming soon...
      </p>
    </div>
    <div id="states-tab" class="cm-tab-content hidden">
      <h2 class="text-2xl font-bold text-gray-800 mb-6">State Management</h2>
      <p class="text-gray-600">
        State management functionality coming soon...
      </p>
    </div>
    <div id="banners-tab" class="cm-tab-content hidden">
      <h2 class="text-2xl font-bold text-gray-800 mb-6">Banner Management</h2>
      <p class="text-gray-600">
        Banner management functionality coming soon...
      </p>
    </div>
    <div id="trips-tab" class="cm-tab-content hidden">
      <h2 class="text-2xl font-bold text-gray-800 mb-6">Trip Management</h2>
      <p class="text-gray-600">
        Trip management functionality coming soon...
      </p>
    </div>
  </div>

  <!-- Image Preview Modal -->
  <div class="modal fade" id="cmPreviewModal" tabindex="-1" aria-labelledby="cmPreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-base font-semibold">Image Preview</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center">
          <img id="cmPreviewModalImg" src="#" class="max-h-[60vh] w-auto mx-auto transform transition-transform duration-200 hover:scale-105" />
        </div>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div class="modal fade" id="cmDeleteConfirmModal" tabindex="-1" aria-labelledby="cmDeleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-base font-semibold">Confirm Delete</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-sm" id="cmDeleteModalBody">
          Are you sure you want to delete the selected category(s)?
        </div>
        <div class="modal-footer">
          <button type="button" class="px-3 py-1.5 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 text-sm" data-bs-dismiss="modal">
            Cancel
          </button>
          <button type="button" id="cmConfirmDeleteBtn" class="px-3 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm">
            Delete
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Crop Image Modal -->
  <div class="modal fade cm-crop-modal" id="cmCropModal" tabindex="-1" aria-labelledby="cmCropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-base font-semibold" id="cmCropModalLabel">
            Crop Image
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center">
          <div class="mt-2 mb-4">
            <label for="cmCropRatio" class="block text-sm font-semibold text-gray-700">Crop Ratio</label>
            <select id="cmCropRatio" name="cropMode" class="border border-gray-300 rounded-md p-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="1" selected>1:1 (Square)</option>
              <option value="1.333">4:3</option>
              <option value="1.777">16:9</option>
              <option value="free">Free Crop</option>
            </select>
          </div>
          <img id="cmCropImage" class="cm-crop-image" />
        </div>
        <div class="modal-footer">
          <button type="button" class="px-3 py-1.5 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 text-sm" data-bs-dismiss="modal">
            Cancel
          </button>
          <button type="button" id="cmCropConfirmBtn" class="px-3 py-1.5 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm">
            Crop & Save
          </button>
        </div>
      </div>
    </div>
  </div>

  <%- include('../../partials/footer'); %>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.js"></script>
  <script>
    // Initialize categories
    let categories = <%- JSON.stringify(categories) %>;
    let filteredCategories = [...categories];
    let selectedCategories = [];
    let cropper = null;

    // Initialize Select2 for dropdowns
    $(document).ready(function() {
      $(".select2").select2({
        placeholder: "Select an option",
        allowClear: true,
        width: '100%'
      });

      // Clear filters
      $('#cmClearFiltersBtn').on('click', function() {
        $('#cmSearchInput').val('');
        $('#cmActiveFilter').val('').trigger('change');
        filteredCategories = [...categories];
        renderCategories();
      });

      // Form submission
      $('#cmCategoryForm').on('submit', function(e) {
        e.preventDefault();
        $('#cmLoadingOverlay').show();
        const formData = new FormData(this);

        if ($('#cmImage').val()) {
          formData.set('image', $('#cmImage')[0].files[0]);
        } else if ($('#cmOldImage').val() && $('#cmCategoryId').val()) {
          formData.set('oldImage', $('#cmOldImage').val());
        }

        // Explicitly set isActive as "true" or "false"
        formData.set('isActive', $('#cmIsActive').is(':checked') ? 'true' : 'false');

        $.ajax({
          url: '/categories',
          method: 'POST',
          data: formData,
          processData: false,
          contentType: false,
          success: function(response) {
            $('#cmLoadingOverlay').hide();
            if (response.success) {
              Toastify({
                text: response.message,
                className: 'cm-toast',
                duration: 3000
              }).showToast();
              setTimeout(() => location.reload(), 600);
            } else {
              Toastify({
                text: response.error || 'Failed to process category.',
                className: 'cm-toast',
                style: {
                  background: '#EF4444'
                },
                duration: 3000
              }).showToast();
            }
          },
          error: function(xhr) {
            $('#cmLoadingOverlay').hide();
            const message = xhr.responseJSON?.error || 'Error processing request.';
            Toastify({
              text: message,
              className: 'cm-toast',
              duration: 3000
            }).showToast();
          }
        });
      });

      // Check for active trips before delete
      async function checkActiveTrips(categoryName) {
        try {
          const response = await $.ajax({
            url: '/categories/check-trips',
            method: 'POST',
            data: JSON.stringify({ categoryName, _csrf: '<%= csrfToken %>' }),
            contentType: 'application/json'
          });
          return response;
        } catch (error) {
          debugger;
          console.log(error);
          Toastify({
            text: 'Error checking active trips.',
            className: 'cm-toast',
            style: {
              background: '#EF4444'
            },
            duration: 3000
          }).showToast();
          return {
            success: false
          };
        }
      }

      // Delete category with AJAX
      $(document).on('submit', '.cm-delete-form', async function(e) {
        e.preventDefault();
        const form = $(this);
        const categoryName = form.find('input[name="categoryName"]').val();

        const tripCheck = await checkActiveTrips(categoryName);
        if (!tripCheck.success) {
          $('#cmDeleteModalBody').html(`Cannot delete category due to active trips:<br>${tripCheck.trips.map(trip => `<strong>${trip.name}</strong>`).join('<br>')}`);
          $('#cmDeleteConfirmModal').modal('show');
          $('#cmConfirmDeleteBtn').addClass('hidden');
          return;
        }

        $('#cmDeleteModalBody').html('Are you sure you want to delete the selected category?');
        $('#cmConfirmDeleteBtn').removeClass('hidden');
        $('#cmDeleteConfirmModal').modal('show');
        $('#cmConfirmDeleteBtn').off('click').on('click', function() {
          $('#cmLoadingOverlay').show();
          $.ajax({
            url: form.attr('action'),
            method: 'POST',
            data: form.serialize(),
            success: function(response) {
              $('#cmLoadingOverlay').hide();
              $('#cmDeleteConfirmModal').modal('hide');
              if (response.success) {
                Toastify({
                  text: response.message,
                  className: 'cm-toast',
                  style: {
                    background: '#10B981'
                  },
                  duration: 3000
                }).showToast();
                setTimeout(() => location.reload(), 600);
              } else {
                Toastify({
                  text: response.message || 'Failed to delete category.',
                  className: 'cm-toast',
                  style: {
                    background: '#EF4444'
                  },
                  duration: 3000
                }).showToast();
              }
            },
            error: function() {
              $('#cmLoadingOverlay').hide();
              $('#cmDeleteConfirmModal').modal('hide');
              Toastify({
                text: 'Error deleting category.',
                className: 'cm-toast',
                style: {
                  background: '#EF4444'
                },
                duration: 3000
              }).showToast();
            }
          });
        });
      });

      // Bulk delete
      $('#cmBulkDeleteBtn').on('click', async function() {
        if (selectedCategories.length === 0) {
          Toastify({
            text: 'No categories selected.',
            className: 'cm-toast',
            style: {
              background: '#F59E0B'
            },
            duration: 3000
          }).showToast();
          return;
        }
        const categoryNames = categories.filter(c => selectedCategories.includes(c._id)).map(c => c.name);
        for (const categoryName of categoryNames) {
          const tripCheck = await checkActiveTrips(categoryName);
          if (!tripCheck.success) {
            $('#cmDeleteModalBody').html(`Cannot delete categories due to active trips in ${categoryName}:<br>${tripCheck.trips.map(trip => `<strong>${trip.name}</strong>`).join('<br>')}`);
            $('#cmDeleteConfirmModal').modal('show');
            $('#cmConfirmDeleteBtn').addClass('hidden');
            return;
          }
        }
        $('#cmDeleteModalBody').html('Are you sure you want to delete the selected categories?');
        $('#cmConfirmDeleteBtn').removeClass('hidden');
        $('#cmDeleteConfirmModal').modal('show');
        $('#cmConfirmDeleteBtn').off('click').on('click', function() {
          $('#cmLoadingOverlay').show();
          const promises = selectedCategories.map(id =>
            $.ajax({
              url: `/categories/delete/${id}`,
              method: 'POST',
              data: {
                _csrf: '<%= csrfToken %>'
              }
            })
          );
          Promise.all(promises)
            .then(responses => {
              $('#cmLoadingOverlay').hide();
              $('#cmDeleteConfirmModal').modal('hide');
              if (responses.every(res => res.success)) {
                Toastify({
                  text: 'Selected categories deleted successfully.',
                  className: 'cm-toast',
                  style: {
                    background: '#10B981'
                  },
                  duration: 3000
                }).showToast();
                setTimeout(() => location.reload(), 600);
              } else {
                Toastify({
                  text: 'Failed to delete some categories.',
                  className: 'cm-toast',
                  style: {
                    background: '#EF4444'
                  },
                  duration: 3000
                }).showToast();
              }
            })
            .catch(() => {
              $('#cmLoadingOverlay').hide();
              $('#cmDeleteConfirmModal').modal('hide');
              Toastify({
                text: 'Error deleting categories.',
                className: 'cm-toast',
                style: {
                  background: '#EF4444'
                },
                duration: 3000
              }).showToast();
            });
        });
      });

      // Initialize drag-and-drop
      const categoryGrid = document.getElementById('cmCategoryGrid');
      let orderChanged = false;
      Sortable.create(categoryGrid, {
        animation: 150,
        handle: '.cm-card',
        touchStartThreshold: 5,
        onEnd: function(evt) {
          orderChanged = true;
          $('#cmSaveOrderBtn').removeClass('hidden');
          updateOrderInputs();
        }
      });

      // Save order with duplicate check
      $('#cmSaveOrderBtn').on('click', function() {
        if (checkDuplicateOrders()) {
          Toastify({
            text: 'Duplicate display orders detected. Please fix before saving.',
            className: 'cm-toast',
            style: {
              background: '#F59E0B'
            },
            duration: 3000
          }).showToast();
          return;
        }
        const newOrder = Array.from(categoryGrid.children).map(card => card.dataset.id);
        $('#cmLoadingOverlay').show();
        $.ajax({
          url: '/categories/update-order',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({
            _csrf: '<%= csrfToken %>',
            order: newOrder
          }),
          success: function(response) {
            $('#cmLoadingOverlay').hide();
            if (response.success) {
              Toastify({
                text: response.message,
                className: 'cm-toast',
                style: {
                  background: '#10B981'
                },
                duration: 3000
              }).showToast();
              orderChanged = false;
              $('#cmSaveOrderBtn').addClass('hidden');
              const orderedCategories = [];
              newOrder.forEach(id => {
                const category = categories.find(c => c._id === id);
                if (category) orderedCategories.push(category);
              });
              categories = orderedCategories;
              filteredCategories = [...categories];
              renderCategories();
            } else {
              Toastify({
                text: response.message || 'Failed to update category order.',
                className: 'cm-toast',
                style: {
                  background: '#EF4444'
                },
                duration: 3000
              }).showToast();
            }
          },
          error: function(xhr) {
            $('#cmLoadingOverlay').hide();
            const message = xhr.responseJSON?.error || 'Error updating category order.';
            Toastify({
              text: message,
              className: 'cm-toast',
              style: {
                background: '#EF4444'
              },
              duration: 3000
            }).showToast();
          }
        });
      });

      // Client-side search and filter
      let searchTimeout;

      function applyFilters() {
        const searchTerm = $('#cmSearchInput').val().toLowerCase().trim();
        const selectedStatus = $('#cmActiveFilter').val();
        filteredCategories = categories.filter(category => {
          const matchesSearch = category.name.toLowerCase().includes(searchTerm);
          const matchesStatus = !selectedStatus || category.isActive.toString() === selectedStatus;
          return matchesSearch && matchesStatus;
        });
        renderCategories();
      }

      $('#cmSearchInput').on('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(applyFilters, 300);
      });

      $('#cmActiveFilter').on('change', applyFilters);

      // Render categories
      function renderCategories() {
        const categoryGrid = $('#cmCategoryGrid');
        categoryGrid.empty();
        if (filteredCategories.length === 0) {
          categoryGrid.append('<p class="cm-no-records">No records found.</p>');
        } else {
          filteredCategories.forEach(category => {
            const card = `
              <div class="cm-card" data-id="${category._id}">
                <input type="checkbox" class="cm-checkbox absolute top-2 left-2" data-id="${category._id}" />
                <img src="${category.image}" alt="${category.name}" class="cm-card-img" data-src="${category.image}" />
                <h4 class="text-base font-semibold text-gray-800">${category.name}</h4>
                <p class="text-xs text-gray-600">${category.isActive ? 'Active' : 'Inactive'}</p>
                <div class="cm-actions">
                  <input type="number" class="cm-order-input w-12 border border-gray-300 rounded-md p-0.5 text-xs" value="${category.displayOrder || 0}" min="0" data-id="${category._id}" />
                  <button class="cm-action-btn edit" onclick="editCategory('${category._id}')">Edit</button>
                  <form action="/categories/delete/${category._id}" method="POST" class="d-inline cm-delete-form">
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
                    <input type="hidden" name="categoryName" value="${category.name}" />
                    <button type="submit" class="cm-action-btn delete">Delete</button>
                  </form>
                </div>
              </div>
            `;
            categoryGrid.append(card);
          });
        }

        $('.lazy-img').each(function() {
          const img = $(this);
          if (img[0].getBoundingClientRect().top < window.innerHeight) {
            img.attr('src', img.data('src')).removeClass('lazy-img');
          }
        });

        $('#cmBulkDeleteBtn').toggle(selectedCategories.length > 0);
        checkDuplicateOrders();
      }

      // Check for duplicate display orders
      function checkDuplicateOrders() {
        const orderInputs = Array.from($('.cm-order-input'));
        const orderValues = {};
        let hasDuplicates = false;
        orderInputs.forEach(input => {
          const value = parseInt(input.value) || 0;
          if (orderValues[value]) {
            input.classList.add('error');
            hasDuplicates = true;
          } else {
            input.classList.remove('error');
            orderValues[value] = true;
          }
        });
        return hasDuplicates;
      }

      // Update order inputs after drag
      function updateOrderInputs() {
        const cards = Array.from(categoryGrid.children);
        cards.forEach((card, index) => {
          const id = card.dataset.id;
          const input = $(card).find('.cm-order-input');
          input.val(index);
          const category = categories.find(c => c._id === id);
          if (category) category.displayOrder = index;
        });
        checkDuplicateOrders();
      }

      // Checkbox selection
      $(document).on('change', '.cm-checkbox', function() {
        const id = $(this).data('id');
        if ($(this).is(':checked')) {
          selectedCategories.push(id);
        } else {
          selectedCategories = selectedCategories.filter(cid => cid !== id);
        }
        $('#cmBulkDeleteBtn').toggle(selectedCategories.length > 0);
      });

      // Inline order update
      $(document).on('change', '.cm-order-input', function() {
        const id = $(this).data('id');
        const newOrder = parseInt($(this).val()) || 0;
        orderChanged = true;
        $('#cmSaveOrderBtn').removeClass('hidden');
        const category = categories.find(c => c._id === id);
        if (category) category.displayOrder = newOrder;
        renderCategories();
      });

      // Edit category
      window.editCategory = function(id) {
        const category = categories.find(c => c._id === id);
        if (!category) {
          Toastify({
            text: 'Category data not found.',
            className: 'cm-toast',
            style: {
              background: '#EF4444'
            },
            duration: 3000
          }).showToast();
          return;
        }

        $('#cmCategoryId').val(id);
        $('#cmCategoryName').val(category.name);
        $('#cmImagePreview').attr('src', category.image);
        $('#cmOldImage').val(category.image);
        // Normalize isActive to boolean
        $('#cmIsActive').prop('checked', category.isActive === true || category.isActive === 'true' || category.isActive === 'on');
        $('#cmSubmitBtn').text('Update Category').removeClass('from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800').addClass('from-green-600 to-green-700 hover:from-green-700 hover:to-green-800');
        $('#cmCancelBtn').removeClass('hidden');
        $('#cmCategoryFormContainer').removeClass('collapsed');
        $('#cmFormToggle').text('Hide Form');
      };

      // Cancel edit
      $('#cmCancelBtn').on('click', function() {
        $('#cmCategoryForm')[0].reset();
        $('#cmCategoryId').val('');
        $('#cmOldImage').val('');
        $('#cmImagePreview').attr('src', '');
        $('#cmIsActive').prop('checked', true);
        $('#cmSubmitBtn').text('Add Category').removeClass('from-green-600 to-green-700 hover:from-green-700 hover:to-green-800').addClass('from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800');
        $('#cmCancelBtn').addClass('hidden');
        $('#cmCategoryFormContainer').addClass('collapsed');
        $('#cmFormToggle').text('Show Form');
      });

      // Image crop handling
      $('#cmImage').on('change', function(event) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(e) {
            $('#cmCropImage').attr('src', e.target.result);
            $('#cmCropModal').modal('show');
            setTimeout(function() {
              if (cropper) cropper.destroy();
              const cropMode = $('#cmCropRatio').val() || '1';
              const aspectRatio = cropMode === 'free' ? NaN : parseFloat(cropMode);
              cropper = new Cropper(document.getElementById('cmCropImage'), {
                aspectRatio: aspectRatio,
                viewMode: 1,
                autoCropArea: 0.8,
                responsive: true
              });
            }, 200);
          };
          reader.readAsDataURL(file);
        }
      });

      $('#cmCropRatio').on('change', function() {
        if (cropper) {
          cropper.destroy();
          const cropMode = $(this).val();
          const aspectRatio = cropMode === 'free' ? NaN : parseFloat(cropMode);
          cropper = new Cropper(document.getElementById('cmCropImage'), {
            aspectRatio: aspectRatio,
            viewMode: 1,
            autoCropArea: 0.8,
            responsive: true
          });
        }
      });

      $('#cmCropConfirmBtn').on('click', function() {
        if (cropper) {
          cropper.getCroppedCanvas({
            width: 300,
            height: 300
          }).toBlob(function(blob) {
            const url = URL.createObjectURL(blob);
            $('#cmImagePreview').attr('src', url).show();
            const file = new File([blob], `cropped-image-${Date.now()}.jpg`, {
              type: 'image/jpeg'
            });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            $('#cmImage')[0].files = dataTransfer.files;
            $('#cmOldImage').val('');
            $('#cmCropModal').modal('hide');
            cropper.destroy();
            cropper = null;
          }, 'image/jpeg', 0.9);
        }
      });

      $('#cmCropModal').on('hidden.bs.modal', function() {
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
      });

      // Form toggle
      $('#cmFormToggle').on('click', function() {
        $('#cmCategoryFormContainer').toggleClass('collapsed');
        $(this).text($('#cmCategoryFormContainer').hasClass('collapsed') ? 'Show Form' : 'Hide Form');
      });

      // Tab switching
      $('.cm-tab').on('click', function() {
        const redirectUrl = $(this).data('redirect');
        if (redirectUrl) {
          window.location.href = redirectUrl;
        } else {
          $('.cm-tab').removeClass('active');
          $(this).addClass('active');
          $('.cm-tab-content').addClass('hidden');
          $(`#${$(this).data('tab')}-tab`).removeClass('hidden');
        }
      });

      // Lazy load images
      $(window).on('scroll', function() {
        $('.lazy-img').each(function() {
          const img = $(this);
          if (img[0].getBoundingClientRect().top < window.innerHeight) {
            img.attr('src', img.data('src')).removeClass('lazy-img');
          }
        });
      });

      // Initial render
      renderCategories();
    });
  </script>
</body>

</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard - Quick Call Requests</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <style>
    .sm-container {
      max-width: 1280px;
      margin: 0 auto;
      padding: 1.5rem 1rem;
      font-family: "Inter", sans-serif;
      background: linear-gradient(to bottom, #f9fafb, #e5e7eb);
    }

    .sm-tabs {
      display: flex;
      border-bottom: 2px solid #d1d5db;
      margin-bottom: 1rem;
    }

    .sm-tab {
      padding: 0.5rem 1rem;
      color: #4b5563;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .sm-tab:hover {
      color: #1d4ed8;
    }

    .sm-tab.active {
      border-bottom: 3px solid #1d4ed8;
      color: #1d4ed8;
    }

    .sm-card {
      background: #ffffff;
      border-radius: 0.75rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
      padding: 0.75rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      position: relative;
    }

    .sm-card.spam {
      background: #fee2e2; /* Light red for spam */
    }

    .sm-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.12);
    }

    .sm-card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
      max-height: 75vh;
      overflow-y: auto;
      padding: 0.75rem;
      background: #f3f4f6;
      border-radius: 0.75rem;
    }

    .sm-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-top: 0.5rem;
      justify-content: center;
    }

    .sm-action-btn {
      padding: 0.5rem 0.75rem;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 0.375rem;
      transition: all 0.2s ease;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .sm-action-btn.call {
      background: linear-gradient(to right, #10b981, #059669);
      color: white;
    }

    .sm-action-btn.call:hover {
      background: linear-gradient(to right, #059669, #047857);
    }

    .sm-toggle-btn {
      padding: 0.5rem 0.75rem;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 0.375rem;
      transition: all 0.2s ease;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .sm-toggle-btn.responded {
      background: linear-gradient(to right, #3b82f6, #1d4ed8);
      color: white;
    }

    .sm-toggle-btn.responded:hover {
      background: linear-gradient(to right, #1d4ed8, #1e40af);
    }

    .sm-toggle-btn.responded.active {
      background: #d1d5db;
      color: #4b5563;
    }

    .sm-toggle-btn.spam {
      background: linear-gradient(to right, #ef4444, #dc2626);
      color: white;
    }

    .sm-toggle-btn.spam:hover {
      background: linear-gradient(to right, #dc2626, #b91c1c);
    }

    .sm-toggle-btn.spam.active {
      background: #d1d5db;
      color: #4b5563;
    }

    .sm-filter-bar {
      display: flex;
      gap: 0.75rem;
      margin-bottom: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }

    .sm-filter-bar .filter-item {
      flex: 1;
      min-width: 200px;
      max-width: 300px;
    }

    .sm-loading {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.6);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    .sm-loading-spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #1d4ed8;
      border-radius: 50%;
      width: 36px;
      height: 36px;
      animation: sm-spin 1s linear infinite;
    }

    .sm-no-records {
      text-align: center;
      padding: 2rem;
      color: #6b7280;
      font-size: 1rem;
      font-weight: 500;
    }

    @keyframes sm-spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    @media (max-width: 640px) {
      .sm-card-grid {
        grid-template-columns: 1fr;
      }

      .sm-filter-bar {
        flex-direction: column;
        align-items: stretch;
      }

      .sm-tabs {
        flex-wrap: wrap;
      }

      .sm-tab {
        flex: 1 1 auto;
        text-align: center;
      }

      .sm-actions {
        flex-direction: column;
        width: 100%;
      }

      .sm-action-btn,
      .sm-toggle-btn {
        width: 100%;
        text-align: center;
      }
    }

    @keyframes sm-fadeIn {
      from { opacity: 0; transform: translateY(8px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>
  <%- include('../../partials/headtag'); %>
</head>
<body class="bg-gray-100">
  <%- include('../../partials/header'); %>
  <div class="sm-container">
    <!-- Loading Overlay -->
    <div class="sm-loading" id="smLoadingOverlay">
      <div class="sm-loading-spinner"></div>
    </div>

    <!-- Tab Navigation -->
    <div class="sm-tabs">
      <div class="sm-tab" data-tab="cities" data-redirect="/cities">City Master</div>
      <div class="sm-tab" data-tab="states" data-redirect="/states">State Master</div>
      <div class="sm-tab" data-tab="category" data-redirect="/categories">Category Master</div>
      <div class="sm-tab" data-tab="banners" data-redirect="/banner">Banner Master</div>
      <div class="sm-tab" data-tab="trips" data-redirect="/trips">Trip Master</div>
      <div class="sm-tab" data-tab="customTrip" data-redirect="/customTrip">Custom Trip</div>
      <div class="sm-tab active" data-tab="quickcall" data-redirect="/quickcall">Quick Call</div>
    </div>

    <!-- Quick Call Requests Tab Content -->
    <div id="quickcall-tab" class="sm-tab-content">
      <!-- Filter and Group Bar -->
      <div class="sm-filter-bar">
        <div class="filter-item">
          <div class="relative">
            <input type="text" id="smSearchInput" class="w-full border border-gray-300 rounded-md pl-8 pr-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Search by name..." />
            <svg class="absolute left-2.5 top-2 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
        <div class="filter-item">
          <select id="smTripFilter" class="w-full border border-gray-300 rounded-md py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">All Trips</option>
            <% uniqueTrips.forEach(trip => { %>
              <option value="<%= trip %>"><%= trip %></option>
            <% }); %>
          </select>
        </div>
        <div class="filter-item">
          <select id="smRespondedFilter" class="w-full border border-gray-300 rounded-md py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">All Responded</option>
            <option value="true">Responded</option>
            <option value="false">Not Responded</option>
          </select>
        </div>
        <div class="filter-item">
          <select id="smSpamFilter" class="w-full border border-gray-300 rounded-md py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">All Spam</option>
            <option value="true">Marked as Spam</option>
            <option value="false">Not Spam</option>
          </select>
        </div>
        <div class="filter-item">
          <select id="smTimeRangeFilter" class="w-full border border-gray-300 rounded-md py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">All Time</option>
            <option value="day">Today</option>
            <option value="week">This Week</option>
            <option value="month">This Month</option>
          </select>
        </div>
        <div class="filter-item">
          <select id="smGroupBySelect" class="w-full border border-gray-300 rounded-md py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">No Grouping</option>
            <option value="mobileNo">Group by Mobile Number</option>
            <option value="tripId">Group by Trip</option>
          </select>
        </div>
        <button id="smClearFiltersBtn" class="px-3 py-1.5 bg-gray-600 text-white rounded-md hover:bg-gray-700 text-sm font-medium">
          Clear Filters
        </button>
      </div>

      <!-- Quick Call Request Cards -->
      <div class="sm-card-grid" id="smQuickCallGrid"></div>
    </div>
  </div>

  <%- include('../../partials/footer'); %>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Initialize state with data passed from the server
    let quickCallRequests = <%- JSON.stringify(quickCallRequests) %>;
    let filteredRequests = [...quickCallRequests];
    let groupBy = '';

    $(document).ready(function() {
      // Initialize Select2 for dropdowns
      $(".select2").select2({
        placeholder: "Select an option",
        allowClear: true,
        width: '100%'
      });

      // Fetch Quick Call requests with filters
      function fetchRequests() {
        const search = $('#smSearchInput').val();
        const trip = $('#smTripFilter').val();
        const responded = $('#smRespondedFilter').val();
        const markAsSpam = $('#smSpamFilter').val();
        const timeRange = $('#smTimeRangeFilter').val();
        const groupBy = $('#smGroupBySelect').val();

        $('#smLoadingOverlay').show();
        $.ajax({
          url: `/quick-call/requests?search=${encodeURIComponent(search)}&trip=${encodeURIComponent(trip)}&responded=${responded}&markAsSpam=${markAsSpam}&timeRange=${timeRange}&groupBy=${groupBy}`,
          method: 'GET',
          data: {
            _csrf: '<%= csrfToken %>' // Include CSRF token if required
          },
          success: function(response) {
            $('#smLoadingOverlay').hide();
            if (response.success) {
              quickCallRequests = response.requests;
              filteredRequests = [...quickCallRequests];
              renderRequests();
            } else {
              Toastify({
                text: response.message || 'Failed to fetch requests.',
                className: 'sm-toast',
                style: { background: '#EF4444' },
                duration: 3000
              }).showToast();
            }
          },
          error: function() {
            $('#smLoadingOverlay').hide();
            Toastify({
              text: 'Error fetching requests.',
              className: 'sm-toast',
              style: { background: '#EF4444' },
              duration: 3000
            }).showToast();
          }
        });
      }
      // Render Quick Call requests
      function renderRequests() {
        const requestGrid = $('#smQuickCallGrid');
        requestGrid.empty();

        if (filteredRequests.length === 0) {
          requestGrid.append('<p class="sm-no-records">No records found.</p>');
          return;
        }

        if (groupBy === 'mobileNo' || groupBy === 'tripId') {
          // Render grouped requests
          filteredRequests.forEach(group => {
            const groupTitle = groupBy === 'mobileNo' ? group._id : (group.trip ? group.trip.name : 'Unknown Trip');
            const groupCard = `
              <div class="sm-card">
                <h4 class="text-base font-semibold text-gray-800">${groupTitle}</h4>
                <div class="w-full mt-2">
                  ${group.requests.map(request => `
                    <div class="sm-card ${request.markAsSpam ? 'spam' : ''} mb-2">
                      <h4 class="text-sm font-semibold text-gray-800">${request.guestName}</h4>
                      <p class="text-xs text-gray-600">Trip: ${request.trip ? request.trip.name : 'N/A'}</p>
                      <p class="text-xs text-gray-600">Requested: ${new Date(request.requestedDate).toLocaleDateString()}</p>
                      <div class="sm-actions">
                        <a href="tel:${request.mobileNo}" class="sm-action-btn call">
                          <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                          </svg>
                          Call
                        </a>
                        <button class="sm-toggle-btn responded ${request.responded ? 'active' : ''}" onclick="toggleResponded('${request._id}', ${!request.responded})">
                          ${request.responded ? 'Unmark Responded' : 'Mark Responded'}
                        </button>
                        <button class="sm-toggle-btn spam ${request.markAsSpam ? 'active' : ''}" onclick="toggleSpam('${request._id}', ${!request.markAsSpam})">
                          ${request.markAsSpam ? 'Unmark Spam' : 'Mark Spam'}
                        </button>
                      </div>
                    </div>
                  `).join('')}
                </div>
              </div>
            `;
            requestGrid.append(groupCard);
          });
        } else {
          // Render individual requests
          filteredRequests.forEach(request => {
            const card = `
              <div class="sm-card ${request.markAsSpam ? 'spam' : ''}">
                <h4 class="text-base font-semibold text-gray-800">${request.guestName}</h4>
                <p class="text-xs text-gray-600">Trip: ${request.tripId ? request.tripId.name : 'N/A'}</p>
                <p class="text-xs text-gray-600">Requested: ${new Date(request.requestedDate).toLocaleDateString()}</p>
                <div class="sm-actions">
                  <a href="tel:${request.mobileNo}" class="sm-action-btn call">
                    <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                    </svg>
                    Call
                  </a>
                  <button class="sm-toggle-btn responded ${request.responded ? 'active' : ''}" onclick="toggleResponded('${request._id}', ${!request.responded})">
                    ${request.responded ? 'Unmark Responded' : 'Mark Responded'}
                  </button>
                  <button class="sm-toggle-btn spam ${request.markAsSpam ? 'active' : ''}" onclick="toggleSpam('${request._id}', ${!request.markAsSpam})">
                    ${request.markAsSpam ? 'Unmark Spam' : 'Mark Spam'}
                  </button>
                </div>
              </div>
            `;
            requestGrid.append(card);
          });
        }
      }

      // Toggle Responded status
      window.toggleResponded = function(id, responded) {
        $('#smLoadingOverlay').show();
        $.ajax({
          url: `/quick-call/${id}`,
          method: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify({
            _csrf: '<%= csrfToken %>',
            responded
          }),
          success: function(response) {
            $('#smLoadingOverlay').hide();
            if (response.success) {
              Toastify({
                text: response.message,
                className: 'sm-toast',
                style: { background: '#10B981' },
                duration: 3000
              }).showToast();
              fetchRequests();
            } else {
              Toastify({
                text: response.message || 'Failed to update request.',
                className: 'sm-toast',
                style: { background: '#EF4444' },
                duration: 3000
              }).showToast();
            }
          },
          error: function() {
            $('#smLoadingOverlay').hide();
            Toastify({
              text: 'Error updating request.',
              className: 'sm-toast',
              style: { background: '#EF4444' },
              duration: 3000
            }).showToast();
          }
        });
      };

      // Toggle Spam status
      window.toggleSpam = function(id, markAsSpam) {
        $('#smLoadingOverlay').show();
        $.ajax({
          url: `/quick-call/${id}`,
          method: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify({
            _csrf: '<%= csrfToken %>',
            markAsSpam
          }),
          success: function(response) {
            $('#smLoadingOverlay').hide();
            if (response.success) {
              Toastify({
                text: response.message,
                className: 'sm-toast',
                style: { background: '#10B981' },
                duration: 3000
              }).showToast();
              fetchRequests();
            } else {
              Toastify({
                text: response.message || 'Failed to update request.',
                className: 'sm-toast',
                style: { background: '#EF4444' },
                duration: 3000
              }).showToast();
            }
          },
          error: function() {
            $('#smLoadingOverlay').hide();
            Toastify({
              text: 'Error updating request.',
              className: 'sm-toast',
              style: { background: '#EF4444' },
              duration: 3000
            }).showToast();
          }
        });
      };

      // Search filter
      let searchTimeout;
      $('#smSearchInput').on('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          fetchRequests();
        }, 300);
      });

      // Trip filter
      $('#smTripFilter').on('change', function() {
        fetchRequests();
      });

      // Responded filter
      $('#smRespondedFilter').on('change', function() {
        fetchRequests();
      });

      // Spam filter
      $('#smSpamFilter').on('change', function() {
        fetchRequests();
      });

      // Time range filter
      $('#smTimeRangeFilter').on('change', function() {
        fetchRequests();
      });

      // Group by selection
      $('#smGroupBySelect').on('change', function() {
        groupBy = $(this).val();
        fetchRequests();
      });

      // Clear filters
      $('#smClearFiltersBtn').on('click', function() {
        $('#smSearchInput').val('');
        $('#smTripFilter').val('all');
        $('#smRespondedFilter').val('all');
        $('#smSpamFilter').val('all');
        $('#smTimeRangeFilter').val('all');
        $('#smGroupBySelect').val('');
        groupBy = '';
        fetchRequests();
      });

      // Tab switching
      $('.sm-tab').on('click', function() {
        const redirectUrl = $(this).data('redirect');
        if (redirectUrl) {
          window.location.href = redirectUrl;
        }
      });

      // Initial render
      renderRequests();
    });
  </script>
</body>
</html>